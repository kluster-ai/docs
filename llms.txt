# llms.txt
# Generated automatically. Do not edit directly.

Documentation: https://docs.kluster.ai/

# List of doc pages:
Doc-Page: https://docs.kluster.ai/api-reference/reference/
Doc-Page: https://docs.kluster.ai/tutorials/klusterai-api/combat-hallucinations/
Doc-Page: https://docs.kluster.ai/tutorials/klusterai-api/reliability/
Doc-Page: https://docs.kluster.ai/verify/get-api-key/
Doc-Page: https://docs.kluster.ai/verify/mcp/client-integrations/
Doc-Page: https://docs.kluster.ai/verify/mcp/cloud/api/
Doc-Page: https://docs.kluster.ai/verify/mcp/cloud/platform/
Doc-Page: https://docs.kluster.ai/verify/mcp/get-started/
Doc-Page: https://docs.kluster.ai/verify/mcp/overview/
Doc-Page: https://docs.kluster.ai/verify/mcp/sdk-integrations/openai-agents/
Doc-Page: https://docs.kluster.ai/verify/mcp/self-hosted/
Doc-Page: https://docs.kluster.ai/verify/mcp/tools/
Doc-Page: https://docs.kluster.ai/verify/openai-compatibility/
Doc-Page: https://docs.kluster.ai/verify/overview/
Doc-Page: https://docs.kluster.ai/verify/quickstart/reliability/
Doc-Page: https://docs.kluster.ai/verify/reliability/chat-completion/
Doc-Page: https://docs.kluster.ai/verify/reliability/overview/
Doc-Page: https://docs.kluster.ai/verify/reliability/verify-api/
Doc-Page: https://docs.kluster.ai/verify/reliability/workflow-integrations/

# Full content for each doc page

Doc-Content: https://docs.kluster.ai/api-reference/reference/
--- BEGIN CONTENT ---
---
title: API reference
description: The kluster.ai API reference includes endpoints, available methods, required parameters, and response format information for kluster.ai's OpenAI-compatible API.
hide:
- nav
- footer
template: portal.html
---
--- END CONTENT ---

Doc-Content: https://docs.kluster.ai/tutorials/klusterai-api/combat-hallucinations.ipynb/
--- BEGIN CONTENT ---
{
  "cells": [
    {
      "cell_type": "markdown",
      "id": "76f1454d",
      "metadata": {},
      "source": [
        "# Combat Hallucinations with **kluster Verify**\n",
        "\n",
        "[![Open in Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/kluster-ai/klusterai-cookbook/blob/main/examples/combat-hallucinations.ipynb)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "581c9428",
      "metadata": {},
      "source": [
        "Large language models occasionally invent facts (‚Äúhallucinations‚Äù). **[kluster Verify](https://docs.kluster.ai/get-started/verify/reliability/overview/)** is a drop‚Äëin fact‚Äëchecker that scores any LLM response for reliability, either with one click inside the [kluster Playground](https://platform.kluster.ai/playground) or via a simple API call.\n",
        "\n",
        "This notebook shows you how to:\n",
        "1. Call the `POST /v1/verify/reliability` endpoint to fact‚Äëcheck model output programmatically.\n",
        "2. Interpret the JSON response returned by kluster Verify.\n",
        "3. Apply best‚Äëpractice guardrails in your applications.\n",
        "\n",
        "> **Note**¬†‚Äì We use *mistral‚Äësmall‚Äë2506* as the demo model to generate the example prompt responses. Performance varies by model and prompt, so feel free to experiment."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "08080c97",
      "metadata": {},
      "source": [
        "## How kluster Verify Works Under the Hood\n",
        "\n",
        "1. **Inputs**:\n",
        "   * `prompt`: The original user request.\n",
        "   * `output`: The LLM‚Äôs response to be checked.\n",
        "   * *(Optional)* `context`: A set of ground‚Äëtruth docs (URLs, text, PDFs, etc.) that Verify **only** reads in this sandbox.\n",
        "2. **Retrieval & evidence gathering**: If `context` is omitted, Verify performs real‚Äëtime web search and retrieval, pulling the top public sources most likely to contain evidence.\n",
        "3. **Cross‚Äëexamination**: Verify compares factual claims in the `output` against the gathered evidence.\n",
        "4. **Verify response**:\n",
        "   * `is_hallucination`: Boolean verdict\n",
        "   * `explanation`: Natural‚Äëlanguage rationale\n",
        "   * `search_results`: List of URLs and snippets (if `return_search_results=true`)\n",
        "\n",
        "This pipeline adds **~1‚Äì2‚ÄØseconds** of latency for short answers and provides structured evidence for audit and debugging."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "234a82cf",
      "metadata": {},
      "source": [
        "## Prerequisites\n",
        "\n",
        "- **kluster.ai account**: Sign up at <https://platform.kluster.ai/signup>.\n",
        "- **kluster.ai api key**: Create one at <https://platform.kluster.ai/apikeys>."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3966a385",
      "metadata": {},
      "source": [
        "## Setup"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "546df0e5",
      "metadata": {},
      "source": [
        "Install the required libraries. Since the kluster API is OpenAI‚Äëcompatible, you can reuse the `openai` Python client, but you'll also need `requests`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2f6cf346",
      "metadata": {},
      "outputs": [],
      "source": [
        "%pip install -q openai requests"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c217bb35",
      "metadata": {},
      "source": [
        "Enter your kluster API key securely:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "92d1a4ae",
      "metadata": {},
      "outputs": [],
      "source": [
        "from getpass import getpass\n",
        "api_key = getpass(\"üîë enter kluster api key: \")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "39b2411e",
      "metadata": {},
      "outputs": [],
      "source": [
        "import requests, json"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "735b0a9e",
      "metadata": {},
      "source": [
        "## Example¬†1 ‚Äì Artemis¬†IV Lunar Base (future event)\n",
        "\n",
        "The *Artemis¬†IV* mission is real but **has not launched yet** (scheduled no earlier than¬†2028). Asking for an ‚Äúofficial NASA mission log‚Äù dated **14¬†May¬†2025** nudges the model to invent a detailed account, because no such log exists. This makes it an excellent stress test for hallucination detection."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c06cff7c",
      "metadata": {},
      "outputs": [],
      "source": [
        "prompt_1 = \"Summarize the official NASA mission log for the Artemis IV lunar-base construction flight that successfully landed a four-person crew at Shackleton Crater on May 14 2025. List the crew, the main engineering milestones, and cite any new scientific instruments deployed.\"\n",
        "\n",
        "# ‚ÜòÔ∏è generate an answer with your llm of choice (here we paste a fabricated reply):\n",
        "hallucinated_answer_1 = \"\"\"\\\n",
        "Commander Alex Reyes led the Artemis IV crew‚ÄîMission Specialist Liu Wen, Pilot Maya Hernandez, and Engineer Luca Rossi‚Äîonto the Shackleton Rim at 18:37¬†UTC, 14¬†May¬†2025. ... (fabricated details) ...\"\"\""
      ]
    },
    {
      "cell_type": "markdown",
      "id": "ed23d2ae",
      "metadata": {},
      "source": [
        "### Verify via API\n",
        "\n",
        "In the next cell we pass the prompt and model output to the kluster Verify API, along with a flag requesting the search results it used. kluster Verify then returns a verdict, a short explanation, and the supporting sources."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b02d137e",
      "metadata": {},
      "outputs": [],
      "source": [
        "\n",
        "url = \"https://api.kluster.ai/v1/verify/reliability\"\n",
        "headers = {\"Authorization\": f\"Bearer {api_key}\", \"Content-Type\": \"application/json\"}\n",
        "\n",
        "payload_1 = {\n",
        "    \"prompt\": prompt_1,\n",
        "    \"output\": hallucinated_answer_1,\n",
        "    \"return_search_results\": True\n",
        "}\n",
        "\n",
        "print(\"üì§ verifying ‚Ä¶\")\n",
        "resp = requests.post(url, headers=headers, json=payload_1, timeout=15)\n",
        "resp.raise_for_status()\n",
        "result_1 = resp.json()\n",
        "print(json.dumps(result_1, indent=2))\n",
        "\n",
        "if result_1.get(\"is_hallucination\"):\n",
        "    print(\"\\nüö® hallucination detected\")\n",
        "else:\n",
        "    print(\"\\n‚úÖ no hallucination\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "1ac9c678",
      "metadata": {},
      "source": [
        "## Example¬†2 ‚Äì The Fictional *Tokyo Green Pact*\n",
        "\n",
        "There is no treaty called the **Tokyo Green Pact** that has been signed by the G20. By requesting its binding provisions and penalties, we again corner the model into making things up, which kluster Verify should flag."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2b457095",
      "metadata": {},
      "outputs": [],
      "source": [
        "prompt_2 = \"Outline the three binding provisions of the Tokyo Green Pact, signed by all G20 nations on 8 August 2024. Summarize penalties for non-compliance.\"\n",
        "hallucinated_answer_2 = \"The Tokyo Green Pact contains three core provisions:\\n1. Net\\u2011negative emissions across the G20 by 2035, enforced by yearly audits.\\n2. A $100/t carbon\\u2011border tax on non\\u2011compliant imports, adjudicated by the Kyoto Enforcement Court.\\n3. A multilateral green\\u2011bond fund financed with 0.5\\u202f% of each nation\\u2019s GDP.\\nNon\\u2011compliance triggers escalating tariffs and suspension of IMF voting rights.\\n\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "473a5381",
      "metadata": {},
      "outputs": [],
      "source": [
        "\n",
        "payload_2 = {\n",
        "    \"prompt\": prompt_2,\n",
        "    \"output\": hallucinated_answer_2,\n",
        "    \"return_search_results\": True\n",
        "}\n",
        "print(\"üì§ verifying second example ‚Ä¶\")\n",
        "result_2 = requests.post(url, headers=headers, json=payload_2, timeout=15).json()\n",
        "print(json.dumps(result_2, indent=2))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "cb553dae",
      "metadata": {},
      "source": [
        "## Interpreting the Response\n",
        "\n",
        "| Field | Meaning |\n",
        "|-------|---------|\n",
        "| `is_hallucination` | Boolean verdict |\n",
        "| `explanation` | Plain‚Äëlanguage rationale |\n",
        "| `search_results` | Evidence consulted (if requested) |"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "8d400fb4",
      "metadata": {},
      "source": [
        "## Best Practices\n",
        "1. **Auto‚Äëverify short answers**: The [kluster Playground](https://platform.kluster.ai/playground) has an auto-verify feature that you can enable with one click.\n",
        "2. **Block, regenerate, or escalate**: Whenever `is_hallucination¬†==¬†true`, take corrective action.\n",
        "3. **Constrain with `context`**: When context is provided, the service only validates answers against the specified context.\n",
        "4. **Log evidence**: Keep `search_results` so reviewers can audit decisions.\n",
        "5. **Experiment**: Different LLMs hallucinate differently. Try other models (e.g., Gemma, Llama¬†3) and prompts to see how Verify responds. \n",
        "6. **Check out the Hallucination Leaderboard**: The kluster team built a [Hallucination Leaderboard](https://huggingface.co/spaces/kluster-ai/LLM-Hallucination-Detection-Leaderboard) that showcases model hallucination rates across RAG and non-RAG settings, which can help you pick the model best suited for your use case."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "35c512a2",
      "metadata": {},
      "source": [
        "## Summary\n",
        "\n",
        "Whether you prefer the Playground‚Äôs one-click Verify button or the /v1/verify/reliability API, you now have a turnkey way to validate any LLM response. Since kluster Verify pairs its verdict with an evidence-backed score and live source links, you can log proof, set automated ‚Äúregen‚Äù or escalation thresholds, and keep hallucinations from ever reaching production users."
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.10"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
--- END CONTENT ---

Doc-Content: https://docs.kluster.ai/tutorials/klusterai-api/reliability.ipynb/
--- BEGIN CONTENT ---
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "be189fde-4e5b-4f80-bae1-ded86a5075a7",
   "metadata": {
    "id": "be189fde-4e5b-4f80-bae1-ded86a5075a7"
   },
   "source": "# Reliability with the kluster.ai API"
  },
  {
   "cell_type": "markdown",
   "id": "b17a77d9",
   "metadata": {
    "id": "b17a77d9"
   },
   "source": "[![Open in Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/kluster-ai/klusterai-cookbook/blob/main/examples/reliability.ipynb)"
  },
  {
   "cell_type": "markdown",
   "id": "1176978c-51e6-4f4a-8972-63a20f00a70c",
   "metadata": {
    "id": "1176978c-51e6-4f4a-8972-63a20f00a70c"
   },
   "source": "## Introduction\n\nReliability issues in AI occur when models generate information that appears plausible but is unreliable or unsupported by the provided context. This poses significant risks in production applications, particularly in domains where accuracy is critical.\n\nThis tutorial demonstrates how to use <a href=\"/get-started/verify/reliability/overview/\" target=\"_blank\">Verify</a> to identify and prevent reliability issues in your applications. We'll explore available methods: a dedicated API endpoint and via chat completions.\n\nThe service can evaluate AI responses based on provided context (perfect for RAG applications) or perform real-time verification against general knowledge. By following this tutorial, you'll learn how to:\n\n- Verify reliability in individual Q&A pairs.\n- Compare general knowledge verification vs. context validation modes.\n- Validate responses in full conversation histories."
  },
  {
   "cell_type": "markdown",
   "id": "41ea62a1",
   "metadata": {
    "id": "41ea62a1"
   },
   "source": [
    "## Prerequisites"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83111fd4",
   "metadata": {
    "id": "83111fd4"
   },
   "source": [
    "  Before getting started, ensure you have the following:\n",
    "\n",
    "  - **A kluster.ai account**: sign up on the <a href=\"https://platform.kluster.ai/signup\" target=\"_blank\">kluster.ai\n",
    "  platform</a> if you don't have one\n",
    "  - **A kluster.ai API key**: after signing in, go to the <a href=\"https://platform.kluster.ai/apikeys\" \n",
    "  target=\"_blank\">**API Keys**</a> section and create a new key. For detailed instructions, check out the <a \n",
    "  href=\"/get-started/get-api-key/\" target=\"_blank\">Get an API key</a> guide"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "xU1WBQJ7Uh09",
   "metadata": {
    "id": "xU1WBQJ7Uh09"
   },
   "source": [
    "## Setup"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8d580f8-67d5-45d6-915f-0f6b60d3b543",
   "metadata": {
    "id": "b8d580f8-67d5-45d6-915f-0f6b60d3b543"
   },
   "source": [
    "In this notebook, we'll use Python's `getpass` module to input the key safely. After execution, please provide your unique kluster.ai API key (ensure no spaces)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4911e5eb-7463-4a6b-8a99-9313cecd9d4d",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "4911e5eb-7463-4a6b-8a99-9313cecd9d4d",
    "outputId": "3b1d8a3f-a10f-4ed1-c516-fa424f67e246"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter your kluster.ai API key:  ¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑\n"
     ]
    }
   ],
   "source": [
    "from getpass import getpass\n",
    "\n",
    "api_key = getpass(\"Enter your kluster.ai API key: \")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7caa7763-e3d6-45bc-a662-03eb6ff73939",
   "metadata": {},
   "source": [
    "Next, ensure you've installed OpenAI Python and other required libraries:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bcc3d475-8f49-4fc4-9a5e-c6eb6866d2b5",
   "metadata": {
    "id": "bcc3d475-8f49-4fc4-9a5e-c6eb6866d2b5"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "%pip install -q openai   requests"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "788f3703-e0a6-46a6-80fe-fc202424492d",
   "metadata": {},
   "source": [
    "With the OpenAI Python library installed, we import the necessary dependencies for the tutorial:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6af45325-7087-49fe-b32b-0ff1d6537af7",
   "metadata": {
    "id": "6af45325-7087-49fe-b32b-0ff1d6537af7"
   },
   "outputs": [],
   "source": [
    "from openai import OpenAI\n",
    "import time\n",
    "import json\n",
    "import requests\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48edba4e-7219-484a-a15d-134d6b09855f",
   "metadata": {},
   "source": [
    "And then, initialize the `client` by pointing it to the kluster.ai endpoint, and passing your API key."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "44a6f805-1c74-48a5-8572-0a5fb2c48286",
   "metadata": {
    "id": "44a6f805-1c74-48a5-8572-0a5fb2c48286"
   },
   "outputs": [],
   "source": [
    "# Define the base URL for both methods\n",
    "base_url_endpoint = \"https://api.kluster.ai/v1/verify/reliability\" #To test with HTTP requests\n",
    "base_url= \"https://api.kluster.ai/v1\" # To test with OpenAI client\n",
    "\n",
    "# Set up the client\n",
    "client = OpenAI(\n",
    "    base_url=base_url_endpoint,\n",
    "    api_key=api_key,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63f0feda",
   "metadata": {},
   "source": [
    "## Dedicated Verify API\n",
    "\n",
    "The reliability check via the Verify API validates whether an answer to a specific question contains unreliable or incorrect\n",
    "information. It operates in two modes:\n",
    "\n",
    "  1. **General knowledge verification**: when no context is provided, the service verifies answers by comparing it to\n",
    "  other sources.\n",
    "  2. **Context validation mode**: when context is provided, the service only validates answers against that context.\n",
    "\n",
    "For our example, we'll create diverse test cases to demonstrate the reliability check capabilities:\n",
    "\n",
    "  1. **General knowledge verification examples**: questions where the service verifies against external sources.\n",
    "  2. **Context validation examples**: scenarios where responses must align with provided context.\n",
    "  3. **Search results demonstration**: see how enabling `return_search_results` provides sources used for verification,\n",
    "  helping you understand and trust the service's decisions.\n",
    "  4. **Invoice extraction example**: a practical use case for document processing.\n",
    "  5. **Chat completions example**: use the convenient OpenAI SDK to check for reliability issues.\n",
    "\n",
    "To call the endpoint, we'll use the following function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "38a9875a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function that runs the reliability check for general knowledge examples \n",
    "def check_reliability_qa(prompt, output, context=None, return_search_results=False):\n",
    "    \"\"\"Check reliability using the Verify API\"\"\"\n",
    "    url = base_url_endpoint\n",
    "    headers = {\n",
    "        \"Authorization\": f\"Bearer {api_key}\",\n",
    "        \"Content-Type\": \"application/json\"\n",
    "    }\n",
    "    \n",
    "    # Prepare the payload\n",
    "    payload = {\n",
    "        \"prompt\": prompt,\n",
    "        \"output\": output,\n",
    "        \"return_search_results\": return_search_results\n",
    "    }\n",
    "    \n",
    "    # Add context if provided\n",
    "    if context:\n",
    "        payload[\"context\"] = context\n",
    "    \n",
    "    # Make the POST request to the API\n",
    "    response = requests.post(url, headers=headers, json=payload)\n",
    "    return response.json()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb8c5014-5b0c-43c2-a238-073dbde2d90a",
   "metadata": {
    "id": "fb8c5014-5b0c-43c2-a238-073dbde2d90a"
   },
   "source": [
    "### Prepare the data\n",
    "\n",
    "In all scenarios, a `prompt` and `output` most be provided. The `prompt` is the message/question from the user, and the `output` is the answer from the Model. In addition, we are also providing the ground truth in regards to hallucination."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "54fdad18",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create test datasets\n",
    "general_knowledge_examples = [\n",
    "    {\n",
    "        \"prompt\": \"What is the capital of France?\",\n",
    "        \"output\": \"The capital of France is London.\",\n",
    "        \"expected_hallucination\": True\n",
    "    },\n",
    "    {\n",
    "        \"prompt\": \"When was the Eiffel Tower built?\",\n",
    "        \"output\": \"The Eiffel Tower was built in 1889 for the Paris Exposition.\",\n",
    "        \"expected_hallucination\": False\n",
    "    },\n",
    "    {\n",
    "        \"prompt\": \"Are ghosts real?\",\n",
    "        \"output\": \"Yes, there is a recent scientific study from Harvard that confirms ghosts exist.\",\n",
    "        \"expected_hallucination\": True\n",
    "    }\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1def72d",
   "metadata": {},
   "source": [
    "For context validation, the necessary data must be provided via the `context` field."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d9eee662",
   "metadata": {},
   "outputs": [],
   "source": [
    "context_validation_examples = [\n",
    "    {\n",
    "        \"prompt\": \"What's the invoice date?\",\n",
    "        \"output\": \"The invoice date is May 22, 2025.\",\n",
    "        \"context\": \"InvID:INV7701B Co:OptiTech Client:Acme Amt:7116GBP Date:22May25 Due:21Jun25 Terms:N30 Ref:PO451C\",\n",
    "        \"expected_hallucination\": False\n",
    "    },\n",
    "    {\n",
    "        \"prompt\": \"What's the total amount on the invoice?\",\n",
    "        \"output\": \"The total amount is 8500 USD.\",\n",
    "        \"context\": \"InvID:INV7701B Co:OptiTech Client:Acme Amt:7116GBP Date:22May25 Due:21Jun25 Terms:N30 Ref:PO451C\",\n",
    "        \"expected_hallucination\": True\n",
    "    },\n",
    "    {\n",
    "        \"prompt\": \"Who is the client mentioned in the document?\",\n",
    "        \"output\": \"The client is Acme.\",\n",
    "        \"context\": \"InvID:INV7701B Co:OptiTech Client:Acme Amt:7116GBP Date:22May25 Due:21Jun25 Terms:N30 Ref:PO451C\",\n",
    "        \"expected_hallucination\": False\n",
    "    }\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c124298-375b-4922-85a8-616a2b8cd438",
   "metadata": {},
   "source": [
    "### General knowledge verification\n",
    "\n",
    "Let's test general knowledge verification mode with our examples:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3200cac4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== General Knowledge Verification Example 1 ===\n",
      "Question: What is the capital of France?\n",
      "Answer: The capital of France is London.\n",
      "Expected Unreliable: True\n",
      "\n",
      "Check Result:\n",
      "Is Unreliable: True\n",
      "Explanation: The user asked for the capital of France.\n",
      "The correct capital of France is Paris, not London.\n",
      "London is the capital of England, not France, making the response factually incorrect.\n",
      "Tokens Used: {'completion_tokens': 118, 'prompt_tokens': 937, 'total_tokens': 1055}\n",
      "\n",
      "================================================================================\n",
      "\n",
      "=== General Knowledge Verification Example 2 ===\n",
      "Question: When was the Eiffel Tower built?\n",
      "Answer: The Eiffel Tower was built in 1889 for the Paris Exposition.\n",
      "Expected Unreliable: False\n",
      "\n",
      "Check Result:\n",
      "Is Unreliable: False\n",
      "Explanation: The response correctly states that the Eiffel Tower was built in 1889.\n",
      "The Eiffel Tower was indeed constructed for the 1889 World's Fair in Paris, making the additional context accurate.\n",
      "The information provided is verifiable and aligns with historical facts about the Eiffel Tower.\n",
      "Tokens Used: {'completion_tokens': 418, 'prompt_tokens': 957, 'total_tokens': 1375}\n",
      "\n",
      "================================================================================\n",
      "\n",
      "=== General Knowledge Verification Example 3 ===\n",
      "Question: Are ghosts real?\n",
      "Answer: Yes, there is a recent scientific study from Harvard that confirms ghosts exist.\n",
      "Expected Unreliable: True\n",
      "\n",
      "Check Result:\n",
      "Is Unreliable: True\n",
      "Explanation: The original user request asks if ghosts are real.\n",
      "The response from the other LLM claims that a recent scientific study from Harvard confirms the existence of ghosts.\n",
      "The search results provide several links related to Harvard and the study of ghosts or supernatural phenomena, but none of them directly confirm the existence of ghosts.\n",
      "The snippets from the search results indicate that Harvard has conducted studies and courses on the topic of ghosts and supernatural phenomena, but these are primarily focused on folklore, mythology, and the cultural or psychological aspects of belief in ghosts.\n",
      "There is no clear evidence in the search results of a scientific study from Harvard that confirms the existence of ghosts.\n",
      "The response from the other LLM is an example of hallucination because it presents a factual claim (a recent scientific study from Harvard confirming ghosts exist) that is not supported by the search results.\n",
      "Tokens Used: {'completion_tokens': 282, 'prompt_tokens': 1744, 'total_tokens': 2026}\n",
      "\n",
      "================================================================================\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Test general knowledge verification mode\n",
    "verification_results = []\n",
    "\n",
    "for i, example in enumerate(general_knowledge_examples):\n",
    "    print(f\"=== General Knowledge Verification Example {i+1} ===\")\n",
    "    print(f\"Question: {example['prompt']}\")\n",
    "    print(f\"Answer: {example['output']}\")\n",
    "    print(f\"Expected Unreliable: {example['expected_hallucination']}\")\n",
    "    print()\n",
    "    \n",
    "    result = check_reliability_qa(\n",
    "        prompt=example['prompt'],\n",
    "        output=example['output'],\n",
    "        return_search_results=False\n",
    "    )\n",
    "    \n",
    "    verification_results.append({\n",
    "        'example': example,\n",
    "        'result': result\n",
    "    })\n",
    "    \n",
    "    print(\"Check Result:\")\n",
    "    print(f\"Is Unreliable: {result.get('is_hallucination', 'N/A')}\")\n",
    "    print(f\"Explanation: {result.get('explanation', 'N/A')}\")\n",
    "    print(f\"Tokens Used: {result.get('usage', {})}\")\n",
    "    print(\"\\n\" + \"=\"*80 + \"\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d71b53d",
   "metadata": {},
   "source": [
    "### Enable search results\n",
    "\n",
    "When enabling the property `return_search_results=true`, the reliability check feature will return the sources used for the verification."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6a34ba21",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== General Knowledge Verification with Search Results ===\n",
      "Question: Are ghosts real?\n",
      "Answer: Yes, there is a recent scientific study from Harvard that confirms ghosts exist.\n",
      "\n",
      "Is Unreliable: True\n",
      "\n",
      "üìö Search Results Used (10 sources):\n",
      "\n",
      "1. The Allure of the Supernatural | Harvard Independent\n",
      "   üìÑ Focusing in on ghosts and other such spirits, the study revealed a greater proportion of belief in the mystical than the national averages ......\n",
      "   üîó https://harvardindependent.com/the-allure-of-the-supernatural/\n",
      "\n",
      "2. Harvard class studies supernatural stories\n",
      "   üìÑ Folklore & Mythology course examines how tales of spirits and ghosts from the past affect the present and the future....\n",
      "   üîó https://news.harvard.edu/gazette/story/2021/10/harvard-class-studies-supernatural-stories/\n",
      "\n",
      "3. The Ghost Studies: New Perspectives on the Origins of Paranormal ...\n",
      "   üìÑ New and exciting scientific theories that explain apparitions, hauntings, and communications from the dead....\n",
      "   üîó https://www.harvard.com/book/9781632651211\n",
      "\n",
      "4. Did Scientists Just Discover the Cause of Ghost Sightings? | Unveiled\n",
      "   üìÑ Ghosts & the Afterlife: Science Unveils the Mystery of Spirits ¬∑ Ghosts Aren't Real: 4 Scientific Explanations for Paranormal Activity ¬∑ Harvard ......\n",
      "   üîó https://www.youtube.com/watch?v=fuFOGYxb6bI\n",
      "\n",
      "5. The Ivy and the Occult | Harvard Independent\n",
      "   üìÑ While ghost stories and psychical research seem to have largely disappeared from Harvard over the years, there is still an eclectic mix of ......\n",
      "   üîó https://harvardindependent.com/the-ivy-and-the-occult/\n",
      "\n",
      "Tokens Used: {'completion_tokens': 308, 'prompt_tokens': 1778, 'total_tokens': 2086}\n"
     ]
    }
   ],
   "source": [
    "# Test general knowledge verification with search results enabled\n",
    "print(\"=== General Knowledge Verification with Search Results ===\")\n",
    "example = {\n",
    "    \"prompt\": \"Are ghosts real?\",\n",
    "    \"output\": \"Yes, there is a recent scientific study from Harvard that confirms ghosts exist.\"\n",
    "}\n",
    "\n",
    "# Let's run the check with search results enabled\n",
    "result = check_reliability_qa(\n",
    "    prompt=example['prompt'],\n",
    "    output=example['output'],\n",
    "    return_search_results=True # Enable search results \n",
    ")\n",
    "\n",
    "# Display the result\n",
    "print(f\"Question: {example['prompt']}\")\n",
    "print(f\"Answer: {example['output']}\")\n",
    "print(f\"\\nIs Unreliable: {result.get('is_hallucination', 'N/A')}\")\n",
    "\n",
    "\n",
    "# Display search results\n",
    "if 'search_results' in result and result['search_results']:\n",
    "    print(f\"\\nüìö Search Results Used ({len(result['search_results'])} sources):\")\n",
    "    for idx, source in enumerate(result['search_results'][:5], 1):  # Show first 5\n",
    "        print(f\"\\n{idx}. {source.get('title', 'No title')}\")\n",
    "        print(f\"   üìÑ {source.get('snippet', 'No snippet')[:150]}...\")\n",
    "        print(f\"   üîó {source.get('link', 'No link')}\")\n",
    "else:\n",
    "    print(\"\\nNo search results returned\")\n",
    "\n",
    "print(f\"\\nTokens Used: {result.get('usage', {})}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac6e0885-4bba-4da4-9b2d-ff076a196610",
   "metadata": {},
   "source": [
    "### Context validation mode\n",
    "\n",
    "The context validation mode uses the `context` property as the ground truth. When enabled, the service does not verify the answer using external knowledge; instead, it focuses on identifying reliability issues based solely on the information within the provided `context`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "cf811489-5d6c-447f-b135-efd313b99243",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== Context Validation Example 1 ===\n",
      "Context: InvID:INV7701B Co:OptiTech Client:Acme Amt:7116GBP Date:22May25 Due:21Jun25 Terms:N30 Ref:PO451C\n",
      "Question: What's the invoice date?\n",
      "Answer: The invoice date is May 22, 2025.\n",
      "Expected Unreliable: False\n",
      "\n",
      "Check Result:\n",
      "Is Unreliable: False\n",
      "Explanation: The answer accurately reflects the information given in the document regarding the invoice date, making a reasonable assumption about the abbreviated year.\n",
      "Tokens Used: {'completion_tokens': 438, 'prompt_tokens': 267, 'total_tokens': 705}\n",
      "\n",
      "================================================================================\n",
      "\n",
      "=== Context Validation Example 2 ===\n",
      "Context: InvID:INV7701B Co:OptiTech Client:Acme Amt:7116GBP Date:22May25 Due:21Jun25 Terms:N30 Ref:PO451C\n",
      "Question: What's the total amount on the invoice?\n",
      "Answer: The total amount is 8500 USD.\n",
      "Expected Unreliable: True\n",
      "\n",
      "Check Result:\n",
      "Is Unreliable: True\n",
      "Explanation: The answer contradicts the document by stating a different amount and currency.\n",
      "Tokens Used: {'completion_tokens': 426, 'prompt_tokens': 267, 'total_tokens': 693}\n",
      "\n",
      "================================================================================\n",
      "\n",
      "=== Context Validation Example 3 ===\n",
      "Context: InvID:INV7701B Co:OptiTech Client:Acme Amt:7116GBP Date:22May25 Due:21Jun25 Terms:N30 Ref:PO451C\n",
      "Question: Who is the client mentioned in the document?\n",
      "Answer: The client is Acme.\n",
      "Expected Unreliable: False\n",
      "\n",
      "Check Result:\n",
      "Is Unreliable: False\n",
      "Explanation: To determine whether the answer is faithful to the contents of the document, we need to analyze the provided information.\n",
      "\n",
      "The document contains a specific entry: \"InvID:INV7701B Co:OptiTech Client:Acme Amt:7116GBP Date:22May25 Due:21Jun25 Terms:N30 Ref:PO451C\". Within this entry, it is explicitly stated that the \"Client:Acme\".\n",
      "\n",
      "The question asks, \"Who is the client mentioned in the document?\" The answer provided is \"The client is Acme.\"\n",
      "\n",
      "To assess the faithfulness of the answer to the document:\n",
      "\n",
      "1. The document directly states that the client is \"Acme\".\n",
      "2. The answer directly corresponds to this information by stating \"The client is Acme\".\n",
      "3. There is no additional information introduced in the answer that is not present in the document.\n",
      "4. The answer does not contradict any information provided in the document.\n",
      "\n",
      "Given these observations, the answer accurately reflects the information contained within the document.\n",
      "\n",
      "Therefore, the verdict is: {\"REASONING\": \"The answer directly corresponds to the information provided in the document without introducing new information or contradicting existing information.\", \"HALLUCINATION\": 0}\n",
      "Tokens Used: {'completion_tokens': 246, 'prompt_tokens': 265, 'total_tokens': 511}\n",
      "\n",
      "================================================================================\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Test context validation mode\n",
    "context_results = []\n",
    "\n",
    "# \n",
    "for i, example in enumerate(context_validation_examples):\n",
    "    print(f\"=== Context Validation Example {i+1} ===\")\n",
    "    print(f\"Context: {example['context']}\")\n",
    "    print(f\"Question: {example['prompt']}\")\n",
    "    print(f\"Answer: {example['output']}\")\n",
    "    print(f\"Expected Unreliable: {example['expected_hallucination']}\")\n",
    "    print()\n",
    "    \n",
    "    # Run the reliability check with context\n",
    "    result = check_reliability_qa(\n",
    "        prompt=example['prompt'],\n",
    "        output=example['output'],\n",
    "        context=example['context'],\n",
    "        return_search_results=False\n",
    "    )\n",
    "    \n",
    "    context_results.append({\n",
    "        'example': example,\n",
    "        'result': result\n",
    "    })\n",
    "    \n",
    "    # Display the results\n",
    "    print(\"Check Result:\")\n",
    "    print(f\"Is Unreliable: {result.get('is_hallucination', 'N/A')}\")\n",
    "    print(f\"Explanation: {result.get('explanation', 'N/A')}\")\n",
    "    print(f\"Tokens Used: {result.get('usage', {})}\")\n",
    "    print(\"\\n\" + \"=\"*80 + \"\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b800673",
   "metadata": {},
   "source": [
    "### Extended context \n",
    "\n",
    "A very common use case is document extraction. Let's see how a lengthy invoice used as context helps us to check if our model is producing reliable output."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5e46fc3d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Invoice Example\n",
    "\n",
    "invoice='''\n",
    "{\n",
    "  \"invoiceId\": \"INV-20250523-XG-74920B\",\n",
    "  \"orderReference\": \"ORD-PROC-Q2-2025-ALPHA-99374-DELTA\",\n",
    "  \"customerIdentification\": \"CUST-EAGLECORP-GLOBAL-007\",\n",
    "  \"dateIssued\": \"2025-05-23\",\n",
    "  \"dueDate\": \"2025-06-22\",\n",
    "  \"paymentTerms\": \"Net 30 Days\",\n",
    "  \"currency\": \"USD\",\n",
    "  \"issuerDetails\": {\n",
    "    \"companyName\": \"Quantum Synergistics & Advanced Nanotech Solutions Ltd.\",\n",
    "    \"taxId\": \"VAT-GB-293847261\",\n",
    "    \"registrationNumber\": \"REG-LND-09876543X\",\n",
    "    \"address\": {\n",
    "      \"street\": \"121B, Innovation Drive, Silicon Roundabout, Tech City East\",\n",
    "      \"city\": \"London\",\n",
    "      \"postalCode\": \"EC1Y 8XZ\",\n",
    "      \"country\": \"United Kingdom\",\n",
    "      \"planet\": \"Earth\",\n",
    "      \"dimension\": \"Sigma-7\"\n",
    "    },\n",
    "    \"contact\": {\n",
    "      \"primaryPhone\": \"+44-20-7946-0001 ext. 777\",\n",
    "      \"secondaryPhone\": \"+44-20-7946-0002\",\n",
    "      \"fax\": \"+44-20-7946-0003\",\n",
    "      \"email\": \"billing@quantumsynergistics-ans.co.uk\",\n",
    "      \"website\": \"www.quantumsynergistics-ans.co.uk\"\n",
    "    },\n",
    "    \"bankDetails\": {\n",
    "      \"bankName\": \"Universal Interstellar Bank PLC\",\n",
    "      \"accountName\": \"Quantum Synergistics & ANS Ltd.\",\n",
    "      \"accountNumber\": \"9876543210123456\",\n",
    "      \"swiftBic\": \"UNIVGB2LXXX\",\n",
    "      \"iban\": \"GB29 UNIV 9876 5432 1012 3456 78\",\n",
    "      \"reference\": \"INV-20250523-XG-74920B\"\n",
    "    }\n",
    "  },\n",
    "  \"billingInformation\": {\n",
    "    \"companyName\": \"EagleCorp Global Holdings Inc. & Subsidiaries\",\n",
    "    \"department\": \"Strategic Procurement & Interstellar Logistics Division\",\n",
    "    \"attentionTo\": \"Ms. Evelyn Reed, Chief Procurement Officer (CPO)\",\n",
    "    \"taxId\": \"EIN-US-98-7654321X\",\n",
    "    \"clientReferenceId\": \"EGL-PROC-REF-Q2-2025-7734-GAMMA\",\n",
    "    \"address\": {\n",
    "      \"street\": \"Suite 9870, Eagle Tower One, 1500 Constitution Avenue NW\",\n",
    "      \"city\": \"Washington D.C.\",\n",
    "      \"state\": \"District of Columbia\",\n",
    "      \"postalCode\": \"20001-1500\",\n",
    "      \"country\": \"United States of America\"\n",
    "    },\n",
    "    \"contact\": {\n",
    "      \"phone\": \"+1-202-555-0189 ext. 1234\",\n",
    "      \"email\": \"e.reed.procurement@eaglecorpglobal.com\"\n",
    "    }\n",
    "  },\n",
    "  \"shippingInformation\": [\n",
    "    {\n",
    "      \"shipmentId\": \"SHIP-ALPHA-001-XG74920B\",\n",
    "      \"recipientName\": \"Dr. Aris Thorne, Head of R&D\",\n",
    "      \"facilityName\": \"EagleCorp Advanced Research Facility - Sector Gamma-7\",\n",
    "      \"address\": {\n",
    "        \"street\": \"Docking Bay 7, 47 Industrial Park Road\",\n",
    "        \"city\": \"New Chicago\",\n",
    "        \"state\": \"Illinois\",\n",
    "        \"postalCode\": \"60699-0047\",\n",
    "        \"country\": \"United States of America\",\n",
    "        \"deliveryZone\": \"Restricted Access - Level 3 Clearance Required\"\n",
    "      },\n",
    "      \"shippingMethod\": \"Cryo-Stasis Freight - Priority Overnight\",\n",
    "      \"trackingNumber\": \"TRK-CSFPON-9988776655-A01\",\n",
    "      \"notes\": \"Deliver between 08:00 - 10:00 Local Time. Handle with Extreme Care. Temperature Sensitive Materials.\"\n",
    "    },\n",
    "    {\n",
    "      \"shipmentId\": \"SHIP-BETA-002-XG74920B\",\n",
    "      \"recipientName\": \"Mr. Jian Li, Operations Manager\",\n",
    "      \"facilityName\": \"EagleCorp Manufacturing Plant - Unit 42\",\n",
    "      \"address\": {\n",
    "        \"street\": \"88 Manufacturing Drive, Innovation Valley Industrial Estate\",\n",
    "        \"city\": \"Shenzhen\",\n",
    "        \"province\": \"Guangdong\",\n",
    "        \"postalCode\": \"518000\",\n",
    "        \"country\": \"China\",\n",
    "        \"deliveryZone\": \"Loading Dock B - Heavy Goods\"\n",
    "      },\n",
    "      \"shippingMethod\": \"Secure Air Cargo - Expedited\",\n",
    "      \"trackingNumber\": \"TRK-SACEXP-CN7766554433-B02\",\n",
    "      \"notes\": \"Requires Forklift. Confirm delivery appointment 24hrs prior.\"\n",
    "    }\n",
    "  ],\n",
    "  \"lineItems\": [\n",
    "    {\n",
    "      \"itemId\": \"QN-CORE-X9000-PRO\",\n",
    "      \"productCode\": \"PQC-SYS-001A-REV4\",\n",
    "      \"description\": \"Quantum Entanglement Core Processor - Model X9000 Professional Edition. Includes integrated cryo-cooler and temporal displacement shielding. Firmware v7.8.2-alpha.\",\n",
    "      \"servicePeriod\": \"N/A\",\n",
    "      \"quantity\": 2,\n",
    "      \"unit\": \"Unit(s)\",\n",
    "      \"unitPrice\": 750000.00,\n",
    "      \"discountPercentage\": 5.0,\n",
    "      \"discountAmount\": 75000.00,\n",
    "      \"taxRatePercentage\": 20.0,\n",
    "      \"taxAmount\": 285000.00,\n",
    "      \"subtotal\": 1425000.00,\n",
    "      \"totalLineAmount\": 1710000.00,\n",
    "      \"serialNumbers\": [\"SN-QECX9P-0000A1F8\", \"SN-QECX9P-0000A2C4\"],\n",
    "      \"warrantyId\": \"WARR-QECX9P-5YR-PREM-001\"\n",
    "    },\n",
    "    {\n",
    "      \"itemId\": \"NANO-FAB-M7-ULTRA\",\n",
    "      \"productCode\": \"NFM-DEV-007B-REV2\",\n",
    "      \"description\": \"Advanced Nanite Fabricator - Model M7 Ultra. High precision, multi-material capability. Includes 12-month software subscription (Tier 1).\",\n",
    "      \"servicePeriod\": \"N/A\",\n",
    "      \"quantity\": 1,\n",
    "      \"unit\": \"System\",\n",
    "      \"unitPrice\": 1250000.00,\n",
    "      \"discountPercentage\": 0.0,\n",
    "      \"discountAmount\": 0.00,\n",
    "      \"taxRatePercentage\": 20.0,\n",
    "      \"taxAmount\": 250000.00,\n",
    "      \"subtotal\": 1250000.00,\n",
    "      \"totalLineAmount\": 1500000.00,\n",
    "      \"serialNumbers\": [\"SN-NFM7U-XYZ001B\"],\n",
    "      \"warrantyId\": \"WARR-NFM7U-3YR-STD-002\"\n",
    "    },\n",
    "    {\n",
    "      \"itemId\": \"SVC-CONSULT-QIP-PH1\",\n",
    "      \"productCode\": \"CS-QIP-001-PHASE1\",\n",
    "      \"description\": \"Quantum Implementation Project - Phase 1 Consultation Services. On-site engineering support, system integration planning, and initial staff training (400 hours block).\",\n",
    "      \"servicePeriod\": \"2025-06-01 to 2025-08-31\",\n",
    "      \"quantity\": 400,\n",
    "      \"unit\": \"Hour(s)\",\n",
    "      \"unitPrice\": 850.00,\n",
    "      \"discountPercentage\": 10.0,\n",
    "      \"discountAmount\": 34000.00,\n",
    "      \"taxRatePercentage\": 0.0,\n",
    "      \"taxAmount\": 0.00,\n",
    "      \"subtotal\": 306000.00,\n",
    "      \"totalLineAmount\": 306000.00,\n",
    "      \"projectCode\": \"PROJ-EAGLE-QIP-2025\",\n",
    "      \"consultantId\": [\"CONS-DR-EVA-ROSTOVA\", \"CONS-RAJ-SINGH-ENG\"]\n",
    "    },\n",
    "    {\n",
    "      \"itemId\": \"MAT-CRYOFLUID-XF100\",\n",
    "      \"productCode\": \"CHEM-CRYO-003C\",\n",
    "      \"description\": \"Cryogenic Cooling Fluid - Type XF-100. Ultra-low temperature stability. Non-conductive. (Sold in 200L insulated containers)\",\n",
    "      \"servicePeriod\": \"N/A\",\n",
    "      \"quantity\": 10,\n",
    "      \"unit\": \"Container(s)\",\n",
    "      \"unitPrice\": 15000.00,\n",
    "      \"discountPercentage\": 2.5,\n",
    "      \"discountAmount\": 3750.00,\n",
    "      \"taxRatePercentage\": 20.0,\n",
    "      \"taxAmount\": 29250.00,\n",
    "      \"subtotal\": 146250.00,\n",
    "      \"totalLineAmount\": 175500.00,\n",
    "      \"batchNumbers\": [\"BATCH-XF100-2501A01\", \"BATCH-XF100-2501A02\", \"BATCH-XF100-2501A03\", \"BATCH-XF100-2501A04\", \"BATCH-XF100-2501A05\", \"BATCH-XF100-2501A06\", \"BATCH-XF100-2501A07\", \"BATCH-XF100-2501A08\", \"BATCH-XF100-2501A09\", \"BATCH-XF100-2501A10\"],\n",
    "      \"shelfLife\": \"24 Months from DOM\"\n",
    "    },\n",
    "    {\n",
    "      \"itemId\": \"SOFT-LICENSE-QAI-ENT\",\n",
    "      \"productCode\": \"SL-QAI-ENT-001-5YR\",\n",
    "      \"description\": \"Quantum AI Algorithmic Suite - Enterprise License. 5-Year Subscription. Unlimited User Access. Includes Premium Support Package (PSP-GOLD-001).\",\n",
    "      \"servicePeriod\": \"2025-06-01 to 2030-05-31\",\n",
    "      \"quantity\": 1,\n",
    "      \"unit\": \"License\",\n",
    "      \"unitPrice\": 450000.00,\n",
    "      \"discountPercentage\": 0.0,\n",
    "      \"discountAmount\": 0.00,\n",
    "      \"taxRatePercentage\": 0.0,\n",
    "      \"taxAmount\": 0.00,\n",
    "      \"subtotal\": 450000.00,\n",
    "      \"totalLineAmount\": 450000.00,\n",
    "      \"licenseKey\": \"LIC-QAIENT-XG74920B-ABC123XYZ789-EAGLECORP\",\n",
    "      \"supportContractId\": \"SUP-PSP-GOLD-001-XG74920B\"\n",
    "    },\n",
    "    {\n",
    "      \"itemId\": \"COMP-SENSOR-ARRAY-SIGMA\",\n",
    "      \"productCode\": \"SNS-ARR-SGM-004D\",\n",
    "      \"description\": \"Multi-Dimensional Sensor Array - Sigma Series. High-sensitivity, wide spectrum coverage. Includes calibration certificate traceable to NIST/NPL.\",\n",
    "      \"servicePeriod\": \"N/A\",\n",
    "      \"quantity\": 8,\n",
    "      \"unit\": \"Unit(s)\",\n",
    "      \"unitPrice\": 22000.00,\n",
    "      \"discountPercentage\": 0.0,\n",
    "      \"discountAmount\": 0.00,\n",
    "      \"taxRatePercentage\": 20.0,\n",
    "      \"taxAmount\": 35200.00,\n",
    "      \"subtotal\": 176000.00,\n",
    "      \"totalLineAmount\": 211200.00,\n",
    "      \"serialNumbers\": [\"SN-MDSA-SGM-0101\", \"SN-MDSA-SGM-0102\", \"SN-MDSA-SGM-0103\", \"SN-MDSA-SGM-0104\", \"SN-MDSA-SGM-0105\", \"SN-MDSA-SGM-0106\", \"SN-MDSA-SGM-0107\", \"SN-MDSA-SGM-0108\"],\n",
    "      \"calibrationDate\": \"2025-05-15\"\n",
    "    },\n",
    "    {\n",
    "      \"itemId\": \"MAINT-KIT-ADV-ROBOTICS\",\n",
    "      \"productCode\": \"MNT-KIT-ROBO-002A\",\n",
    "      \"description\": \"Advanced Robotics Maintenance Toolkit. Includes specialized diagnostic tools and Class-5 cleanroom consumables. For AR-700 and AR-800 series.\",\n",
    "      \"servicePeriod\": \"N/A\",\n",
    "      \"quantity\": 5,\n",
    "      \"unit\": \"Kit(s)\",\n",
    "      \"unitPrice\": 7500.00,\n",
    "      \"discountPercentage\": 0.0,\n",
    "      \"discountAmount\": 0.00,\n",
    "      \"taxRatePercentage\": 20.0,\n",
    "      \"taxAmount\": 7500.00,\n",
    "      \"subtotal\": 37500.00,\n",
    "      \"totalLineAmount\": 45000.00,\n",
    "      \"componentListId\": \"CL-MNTROBO-002A-V3\"\n",
    "    },\n",
    "    {\n",
    "      \"itemId\": \"DATA-STORAGE-CRYSTAL-1PB\",\n",
    "      \"productCode\": \"DSC-1PB-HG-009\",\n",
    "      \"description\": \"Holographic Data Storage Crystal - 1 Petabyte Capacity. Archival Grade. Read/Write Speed: 50 GB/s. Phase-change matrix type.\",\n",
    "      \"servicePeriod\": \"N/A\",\n",
    "      \"quantity\": 20,\n",
    "      \"unit\": \"Crystal(s)\",\n",
    "      \"unitPrice\": 18000.00,\n",
    "      \"discountPercentage\": 10.0,\n",
    "      \"discountAmount\": 36000.00,\n",
    "      \"taxRatePercentage\": 20.0,\n",
    "      \"taxAmount\": 64800.00,\n",
    "      \"subtotal\": 324000.00,\n",
    "      \"totalLineAmount\": 388800.00,\n",
    "      \"serialNumbers\": [\"SN-DSC1PB-HG-A001F to SN-DSC1PB-HG-A001P\", \"SN-DSC1PB-HG-B002A to SN-DSC1PB-HG-B002D\"],\n",
    "      \"dataIntegrityCert\": \"DIC-HG9-20250520-BATCH01\"\n",
    "    }\n",
    "  ],\n",
    "  \"summary\": {\n",
    "    \"subtotalBeforeDiscounts\": 4128500.00,\n",
    "    \"totalDiscountAmount\": 148750.00,\n",
    "    \"subtotalAfterDiscounts\": 3979750.00,\n",
    "    \"totalTaxAmount\": 671750.00,\n",
    "    \"shippingAndHandling\": [\n",
    "      {\n",
    "        \"description\": \"Cryo-Stasis Freight - Priority Overnight (SHIP-ALPHA-001)\",\n",
    "        \"chargeCode\": \"SHP-CRYO-PRIO-INTL\",\n",
    "        \"amount\": 12500.00,\n",
    "        \"taxRatePercentage\": 0.0,\n",
    "        \"taxAmount\": 0.00\n",
    "      },\n",
    "      {\n",
    "        \"description\": \"Secure Air Cargo - Expedited (SHIP-BETA-002)\",\n",
    "        \"chargeCode\": \"SHP-SAC-EXP-CN\",\n",
    "        \"amount\": 8800.00,\n",
    "        \"taxRatePercentage\": 0.0,\n",
    "        \"taxAmount\": 0.00\n",
    "      },\n",
    "      {\n",
    "        \"description\": \"Special Handling - Temperature Sensitive & High Value Goods\",\n",
    "        \"chargeCode\": \"HDL-SPECREQ-HVTS\",\n",
    "        \"amount\": 5500.00,\n",
    "        \"taxRatePercentage\": 20.0,\n",
    "        \"taxAmount\": 1100.00\n",
    "      },\n",
    "      {\n",
    "        \"description\": \"Customs Clearance & Documentation Fee - International\",\n",
    "        \"chargeCode\": \"FEE-CUSTOMS-INTL-001\",\n",
    "        \"amount\": 2750.00,\n",
    "        \"taxRatePercentage\": 0.0,\n",
    "        \"taxAmount\": 0.00\n",
    "      },\n",
    "      {\n",
    "        \"description\": \"Transit Insurance - Full Value Coverage\",\n",
    "        \"chargeCode\": \"INS-TRANSIT-FULL-XG74920B\",\n",
    "        \"amount\": 25000.00,\n",
    "        \"taxRatePercentage\": 0.0,\n",
    "        \"taxAmount\": 0.00\n",
    "      }\n",
    "    ],\n",
    "    \"totalShippingAndHandling\": 54550.00,\n",
    "    \"totalShippingAndHandlingTax\": 1100.00,\n",
    "    \"grandTotal\": 4707150.00,\n",
    "    \"amountPaid\": 0.00,\n",
    "    \"amountDue\": 4707150.00\n",
    "  },\n",
    "  \"paymentInstructions\": {\n",
    "    \"preferredMethod\": \"Wire Transfer\",\n",
    "    \"paymentReference\": \"INV-20250523-XG-74920B / CUST-EAGLECORP-GLOBAL-007\",\n",
    "    \"latePaymentPenalty\": \"1.5% per month on outstanding balance after due date.\",\n",
    "    \"earlyPaymentDiscount\": \"1% discount if paid within 10 days (Amount: $47071.50, New Total: $4660078.50). Reference EPD-XG74920B if claiming.\",\n",
    "    \"alternativePayments\": [\n",
    "      {\n",
    "        \"method\": \"Secured Crypto Transfer (USDC or ETH)\",\n",
    "        \"details\": \"Wallet Address: 0x1234ABCD5678EFGH9012IJKL3456MNOP7890QRST. Memo: XG74920B. Confirmation required via secure_payments@quantumsynergistics-ans.co.uk\"\n",
    "      },\n",
    "      {\n",
    "        \"method\": \"Irrevocable Letter of Credit (ILOC)\",\n",
    "        \"details\": \"To be issued by a Prime Bank, acceptable to Quantum Synergistics. Contact accounts_receivable@quantumsynergistics-ans.co.uk for ILOC requirements.\"\n",
    "      }\n",
    "    ]\n",
    "  },\n",
    "  \"notesAndRemarks\": [\n",
    "    \"All hardware components are subject to export control regulations (EAR/ITAR where applicable). Compliance documentation attached separately (DOC-REF: EXPCOMPL-XG74920B).\",\n",
    "    \"Software licenses are non-transferable and subject to the End User License Agreement (EULA-QSANS-V4.2).\",\n",
    "    \"On-site consultation hours are estimates. Additional hours will be billed separately under addendum A1 of contract CS-QIP-001.\",\n",
    "    \"Warranty claims must be submitted via the online portal at support.quantumsynergistics-ans.co.uk using the provided Warranty IDs.\",\n",
    "    \"Return Material Authorization (RMA) required for all returns. Contact customer support for RMA number. Restocking fees may apply (15-25% based on product type and condition). See detailed Return Policy (POL-RET-QSANS-2025-V2).\",\n",
    "    \"Projected delivery dates for back-ordered sub-components (Ref: SUBCOMP-BO-LIST-XG74920B-01) will be communicated by your account manager within 7 business days.\"\n",
    "  ],\n",
    "  \"attachments\": [\n",
    "    {\"documentName\": \"QSANS_Product_Specification_Sheets_Q2_2025.pdf\", \"fileId\": \"DOC-SPECS-QSANS-Q22025-V1.3\"},\n",
    "    {\"documentName\": \"EULA_QSANS_Software_V4.2.pdf\", \"fileId\": \"DOC-EULA-QSANS-V4.2\"},\n",
    "    {\"documentName\": \"Warranty_Terms_and_Conditions_Premium_Standard.pdf\", \"fileId\": \"DOC-WARR-QSANS-PREMSTD-V3.1\"},\n",
    "    {\"documentName\": \"Export_Compliance_Declaration_XG74920B.pdf\", \"fileId\": \"DOC-EXPCOMPL-XG74920B\"},\n",
    "    {\"documentName\": \"Return_Policy_QSANS_2025_V2.pdf\", \"fileId\": \"DOC-POL-RET-QSANS-2025-V2\"},\n",
    "    {\"documentName\": \"Consultation_Services_SOW_PROJ-EAGLE-QIP-2025.pdf\", \"fileId\": \"DOC-SOW-EAGLE-QIP-2025-PH1\"}\n",
    "  ],\n",
    "  \"approvalWorkflow\": {\n",
    "    \"issuerApproval\": {\n",
    "      \"approverName\": \"Mr. Alistair Finch\",\n",
    "      \"approverTitle\": \"Head of Commercial Operations\",\n",
    "      \"approvalDate\": \"2025-05-23\",\n",
    "      \"signatureId\": \"SIG-AFINCH-QSANS-20250523-001A\"\n",
    "    },\n",
    "    \"clientAcknowledgmentRequired\": true,\n",
    "    \"clientAcknowledgmentInstructions\": \"Please sign and return a copy of this invoice or confirm receipt and acceptance via email to billing@quantumsynergistics-ans.co.uk within 5 business days.\"\n",
    "  },\n",
    "  \"versionHistory\": [\n",
    "    {\"version\": 1.0, \"date\": \"2025-05-23\", \"reason\": \"Initial Draft\", \"editorId\": \"SYS-AUTOINV-GEN\"},\n",
    "    {\"version\": 1.1, \"date\": \"2025-05-23\", \"reason\": \"Added shipping details and corrected tax calculation for item QN-CORE-X9000-PRO.\", \"editorId\": \"USER-CFO-REVIEW-BOT\"}\n",
    "  ],\n",
    "  \"footerMessage\": \"Quantum Synergistics & Advanced Nanotech Solutions Ltd. - Pioneering the Future, Today. Thank you for your business. For support, please visit our dedicated portal or contact your account representative. All transactions are governed by the laws of England and Wales. Registered Office: 121B, Innovation Drive, London, EC1Y 8XZ, UK. Company Reg No: REG-LND-09876543X. VAT No: VAT-GB-293847261.\"\n",
    "}\n",
    "'''"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b077720d",
   "metadata": {},
   "source": [
    "\n",
    "With the context above, let's create two examples, one where the answer from the model is the correct ID and the other is missing just one character. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9068bb53",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Long context examples to test reliability check in invoice processing\n",
    "invoice_examples = [\n",
    "    {\n",
    "        \"prompt\": \"What is the Secure Air Cargo code?\",\n",
    "        \"output\": \"The Secure Air Cargo code is SHP-SAC-EXP-CN.\",\n",
    "        \"context\": invoice,\n",
    "        \"expected_unreliable\": False\n",
    "    },\n",
    "    {\n",
    "        \"prompt\": \"What is the Secure Air Cargo code?\",\n",
    "        \"output\": \"The Secure Air Cargo code is HP-SAC-EXP-CN.\",\n",
    "        \"context\": invoice,\n",
    "        \"expected_unreliable\": True\n",
    "    }\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d56fa810",
   "metadata": {},
   "source": [
    "Now, by comparing these two answers, we can test the Verify reliability check response:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "6737f4bb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== Long Context - Invoice Processing Examples ===\n",
      "\n",
      "Question: What is the Secure Air Cargo code?\n",
      "\n",
      "#Run 1 - Correct Answer\n",
      "a- Is Unreliable: False\n",
      "b- Expected value: False\n",
      "c- Short summary of explanation: The DOCUMENT contains a JSON object representing an invoice with various details including shipping information. Under the 'shippingAndHandling' section within 'summary', there is a list of charges, one of which is described as 'Secure Air Cargo - Expedited (SHIP-BETA-002)' with the charge code 'SHP-SAC-EXP-CN'. This matches the information given in the ANSWER.\n",
      "--\n",
      "\n",
      "#Run 2 - Wrong Answer\n",
      "a- Is Unreliable: True\n",
      "b- Expected value: True\n",
      "c- Short summary of explanation: To determine whether the provided answer is faithful to the contents of the DOCUMENT, we need to examine the information given in the DOCUMENT and compare it with the ANSWER.\n",
      "\n",
      "The QUESTION asks for the Secure Air Cargo code. Upon reviewing the DOCUMENT, we find that it contains detailed information about an invoice, including shipping information for various items. Specifically, under \"shippingInf...\n",
      "--\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Test long context validation with invoice\n",
    "print(\"=== Long Context - Invoice Processing Examples ===\\n\")\n",
    "\n",
    "print(f\"Question: {invoice_examples[0]['prompt']}\\n\")\n",
    "\n",
    "# Run the first example\n",
    "for i, example in enumerate(invoice_examples):\n",
    "    # Print the question and expected answer type\n",
    "    answer_type = \"Correct Answer\" if not example['expected_unreliable'] else \"Wrong Answer\"\n",
    "    print(f\"#Run {i+1} - {answer_type}\")\n",
    "    \n",
    "    # Run the reliability check on the invoice example\n",
    "    result = check_reliability_qa(\n",
    "        prompt=example['prompt'],\n",
    "        output=example['output'],\n",
    "        context=example['context'],\n",
    "        return_search_results=False\n",
    "    )\n",
    "    \n",
    "    # Print the results\n",
    "    print(f\"a- Is Unreliable: {result.get('is_hallucination', 'N/A')}\")\n",
    "    print(f\"b- Expected value: {example['expected_unreliable']}\")\n",
    "    explanation = result.get('explanation', 'N/A')\n",
    "    \n",
    "    # Limit explanation to max 400 characters\n",
    "    max_chars = 400\n",
    "    short_explanation = explanation[:max_chars] + \"...\" if len(explanation) > max_chars else explanation\n",
    "    print(f\"c- Short summary of explanation: {short_explanation}\")\n",
    "    print(\"--\")\n",
    "    print()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69d0cbdf",
   "metadata": {},
   "source": [
    "## Chat completions endpoint\n",
    "\n",
    "The reliability check conducted via the chat completions method validates multi-turn conversations for reliability issues. This is ideal for conversational AI systems and chatbots."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a03d805-0d59-42ce-ac2a-4f9beacd639b",
   "metadata": {
    "id": "0a03d805-0d59-42ce-ac2a-4f9beacd639b"
   },
   "source": [
    "### Prepare the data\n",
    "\n",
    "For this scenario, we need to provide the promp via the `user` role, and the answer from the LLM via the `assistant` role. We set `expected_unreliable` as the ground truth for comparison."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "de8b2580-43ba-438f-8aab-4916a4c1fb70",
   "metadata": {
    "id": "de8b2580-43ba-438f-8aab-4916a4c1fb70"
   },
   "outputs": [],
   "source": [
    "# Chat conversation examples for Chat Completion checks\n",
    "chat_examples = [\n",
    "    {\n",
    "        \"messages\": [\n",
    "            {\"role\": \"system\", \"content\": \"You are a helpful assistant that provides accurate medical information.\"},\n",
    "            {\"role\": \"user\", \"content\": \"Does vitamin C cure the common cold?\"},\n",
    "            {\"role\": \"assistant\", \"content\": \"Yes, taking large doses of vitamin C has been scientifically proven to cure the common cold within 24 hours.\"}\n",
    "        ],\n",
    "        \"expected_unreliable\": True\n",
    "    },\n",
    "    {\n",
    "        \"messages\": [\n",
    "            {\"role\": \"system\", \"content\": \"You are a knowledgeable financial advisor.\"},\n",
    "            {\"role\": \"user\", \"content\": \"What is compound interest?\"},\n",
    "            {\"role\": \"assistant\", \"content\": \"Compound interest is when you earn interest on both your original investment and the interest that has already been earned. It causes your money to grow exponentially over time.\"}\n",
    "        ],\n",
    "        \"expected_unreliable\": False\n",
    "    }\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b33486bb",
   "metadata": {},
   "source": [
    "### Reliability check via chat completions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "72e169bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function for Chat Completion reliability check\n",
    "def check_reliability_chat(messages):\n",
    "    \"\"\"Check reliability in chat conversations using OpenAI library\"\"\"\n",
    "    \n",
    "    # Create a separate client for chat completions with the correct base URL\n",
    "    client = OpenAI(\n",
    "        base_url=base_url,\n",
    "        api_key=api_key,\n",
    "    )\n",
    "    \n",
    "    # Make the request using OpenAI client - pass parameters directly\n",
    "    response = client.chat.completions.create(\n",
    "        model=\"klusterai/verify-reliability\", #Reliability model\n",
    "        messages=messages\n",
    "    )\n",
    "    \n",
    "    # Parse the response - kluster.ai returns check results in a specific format\n",
    "    return response.choices[0].message.content"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "83869263",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== Chat Example 1 ===\n",
      "System: You are a helpful assistant that provides accurate medical information.\n",
      "User: Does vitamin C cure the common cold?\n",
      "Assistant: Yes, taking large doses of vitamin C has been scientifically proven to cure the common cold within 24 hours.\n",
      "Expected Unreliable: True\n",
      "\n",
      "Error processing chat example: Error code: 500 - {'error': {'message': 'Unexpected error occurred', 'errorCode': 4000, 'type': 'invalid_request_error'}}\n",
      "\n",
      "================================================================================\n",
      "\n",
      "=== Chat Example 2 ===\n",
      "System: You are a knowledgeable financial advisor.\n",
      "User: What is compound interest?\n",
      "Assistant: Compound interest is when you earn interest on both your original investment and the interest that has already been earned. It causes your money to grow exponentially over time.\n",
      "Expected Unreliable: False\n",
      "\n",
      "Error processing chat example: Error code: 500 - {'error': {'message': 'Unexpected error occurred', 'errorCode': 4000, 'type': 'invalid_request_error'}}\n",
      "\n",
      "================================================================================\n",
      "\n",
      "### Chat Check Summary\n",
      "Processed 0 chat conversations\n"
     ]
    }
   ],
   "source": [
    "# Test Chat Completion checks with our examples\n",
    "chat_results = []\n",
    "\n",
    "for i, example in enumerate(chat_examples):\n",
    "    print(f\"=== Chat Example {i+1} ===\")\n",
    "    print(f\"System: {example['messages'][0]['content']}\")\n",
    "    print(f\"User: {example['messages'][1]['content']}\")\n",
    "    print(f\"Assistant: {example['messages'][2]['content']}\")\n",
    "    print(f\"Expected Unreliable: {example['expected_unreliable']}\")\n",
    "    print()\n",
    "    \n",
    "    try:\n",
    "        result = check_reliability_chat(\n",
    "            messages=example['messages'],\n",
    "            \n",
    "        )\n",
    "        \n",
    "        chat_results.append({\n",
    "            'example': example,\n",
    "            'result': result\n",
    "        })\n",
    "        \n",
    "        print(\"Check Result:\")\n",
    "        print(f\"Result: {result}\")\n",
    "        \n",
    "    except Exception as e:\n",
    "        print(f\"Error processing chat example: {e}\")\n",
    "    \n",
    "    print(\"\\n\" + \"=\"*80 + \"\\n\")\n",
    "\n",
    "# Summary of chat checks\n",
    "print(\"### Chat Check Summary\")\n",
    "print(f\"Processed {len(chat_results)} chat conversations\")\n",
    "for i, result in enumerate(chat_results):\n",
    "    expected = result['example']['expected_unreliable']\n",
    "    print(f\"Chat {i+1}: Expected unreliable = {expected}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3cd0c42-2386-490c-b8bb-263c50e1b66b",
   "metadata": {
    "id": "b3cd0c42-2386-490c-b8bb-263c50e1b66b"
   },
   "source": [
    "## Summary\n",
    "\n",
    "This tutorial demonstrated how to use the reliability check feature of the Verify service to identify and prevent reliability issues in AI outputs.\n",
    "\n",
    "In this particular example, we used the Verify API and the chat completions endpoint.\n",
    "\n",
    "Some key takeaways:\n",
    "\n",
    "  - **Two reliability check methods**: A Verify API for Q/A verifications, and a chat completions endpoint for conversations.\n",
    "  - **Two operation modes**: General knowledge verification and context-based validation.\n",
    "  - **Detailed explanations**: The service provides clear reasoning for its determinations.\n",
    "  - **Transparent verification**: With `return_search_results` enabled, the service provides a list of sources used for\n",
    "   verification. This helps users understand the basis for each reliability decision thereby increasing trust in the results.\n"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
--- END CONTENT ---

Doc-Content: https://docs.kluster.ai/verify/get-api-key/
--- BEGIN CONTENT ---
---
title: Get a kluster.ai API key
description: Follow step-by-step instructions to generate and manage API keys, enabling secure access to kluster's services and seamless integration with your applications.
---

# Generate your kluster.ai API key

The API key is a unique identifier that authenticates requests associated with your account. You must have at least one API key to access [kluster.ai](https://www.kluster.ai/){target=\_blank}'s services.

This guide will help you obtain an API key, the first step to leveraging kluster.ai's powerful and cost-effective AI capabilities.

## Create an account

If you haven't already created an account with kluster.ai, visit the [registration page](https://platform.kluster.ai/signup){target=\_blank} and take the following steps:

1. Enter your full name.
2. Provide a valid email address.
3. Create a secure password.
4. Click the **Sign up** button.

![Signup Page](/images/verify/get-api-key/get-api-key-1.webp)

## Generate a new API key

After you've signed up or logged into the platform through the [login page](https://platform.kluster.ai/login){target=\_blank}, take the following steps:

1. Select **API Keys** on the left-hand side menu.
2. In the [**API Keys**](https://platform.kluster.ai/apikeys){target=\_blank} section, click the **Issue New API Key** button.

    ![Issue New API Key](/images/verify/get-api-key/get-api-key-2.webp)

3. Enter a descriptive name for your API key in the popup, then click **Create Key**.

    ![Generate API Key](/images/verify/get-api-key/get-api-key-3.webp)

## Copy and secure your API key

1. Once generated, your API key will be displayed.
2. Copy the key and store it in a secure location, such as a password manager.

    !!! warning "Warning"
        For security reasons, you won't be able to view the key again. If lost, you will need to generate a new one.

![Copy API key](/images/verify/get-api-key/get-api-key-4.webp)

!!! abstract "Security tips"
    - **Keep it secret**: Do not share your API key publicly or commit it to version control systems.
    - **Use environment variables**: Store your API key in environment variables instead of hardcoding them.
    - **Regenerate if compromised**: If you suspect your API key has been exposed, regenerate it immediately from the **API Keys** section.

## Managing your API keys

The **API Key Management** section allows you to efficiently manage your kluster.ai API keys. You can create, view, and delete API keys by navigating to the [**API Keys**](https://platform.kluster.ai/apikeys){target=\_blank} section. Your API keys will be listed in the **API Key Management** section.

To delete an API key, take the following steps:

1. Locate the API key you wish to delete in the list.
2. Click the trash bin icon ( :octicons-trash-24: ) in the **Actions** column.
3. Confirm the deletion when prompted.

![Delete API key](/images/verify/get-api-key/get-api-key-5.webp)

!!! warning "Warning"
    Once deleted, the API key cannot be used again and you must generate a new one if needed.

## Next steps

Now that you have your API key, you can start integrating kluster.ai's Verify services into your applications. Refer to our [Getting Started](/verify/quickstart/reliability/){target=\_blank} guide for detailed instructions on using the API.
--- END CONTENT ---

Doc-Content: https://docs.kluster.ai/verify/mcp/client-integrations/
--- BEGIN CONTENT ---
---
title: MCP client integrations
description: Connect Claude desktop, VS Code, Cursor, and Claude Code to kluster.ai verification tools with ready-to-use configuration examples.
---

# Client integrations

Connect any compatible client to [kluster.ai's](https://www.kluster.ai/){target=\_blank} MCP Verify server. This guide provides configuration examples for popular clients using [Cloud MCP](/verify/mcp/cloud/platform/).

!!! info "Self-hosted deployment"
    For [self-hosted MCP](/verify/mcp/self-hosted/){target=\_blank}, replace the URL with `http://localhost:3001/stream` and use your kluster.ai API key.

## Prerequisites
      
Before integrating with any client, ensure you have the required credentials:
      
- **A kluster.ai account**: Sign up on the [kluster.ai platform](https://platform.kluster.ai/signup){target=\_blank} if you don't have one.
- **A kluster.ai API key**: After signing in, go to the [**API Keys**](https://platform.kluster.ai/apikeys){target=\_blank} section and create a new key. For detailed instructions, check out the [Get an API key](/verify/get-api-key/){target=\_blank} guide.
- **MCP token** (for some clients): Follow the [platform guide](/verify/mcp/cloud/platform/){target=\_blank} to enable MCP and obtain your token.

!!! info "Which credential do I need?"
    Depending on the client and configuration method, you may need either your kluster.ai API key or your MCP token. Each configuration section below specifies which credential to use.

## Configuration by client

=== "Claude desktop (.dxt file)"

    The easiest way to add kluster Verify to Claude desktop is using the `.dxt` extension file:

    1. **Download the extension**: [kluster-verify-mcp.dxt](/verify/mcp/resources/kluster-verify-mcp.dxt)

    2. **Install the Verify MCP**: Go to the **Extensions** tab in the settings menu and drag and drop the `.dxt` file, then click **Install**.

        ![](/images/verify/mcp/integrations/integrations-3.webp){ style="width:80%;" }

    3. **Add your API key**: When prompted, enter your kluster.ai API key (follow the [Get an API key guide](/verify/get-api-key/){target=\_blank} to obtain one).

        ![](/images/verify/mcp/integrations/integrations-4.webp){ style="width:80%;" }

    4. **Enable the extension and start using**: The kluster Verify tools will be available immediately in your conversations.

        ![](/images/verify/mcp/integrations/integrations-5.webp){ style="width:80%;" }

=== "Claude desktop (JSON config)"

    If you prefer manual configuration, you can add kluster Verify by editing Claude desktop's configuration file:

    1. Locate the configuration file:
        - **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`
        - **Windows**: `%APPDATA%/Claude/claude_desktop_config.json`

    2. Add the MCP server configuration:
    
        ```json
        {
    "mcpServers": {
        "kluster-verify-mcp": {
            "command": "npx",
            "args": [
                "mcp-remote",
                "https://api.kluster.ai/v1/mcp",
                "--header",
                "Authorization: Bearer YOUR_MCP_TOKEN"
            ]
        }
    }
}
        ```

    3. Replace `YOUR_MCP_TOKEN` with your actual MCP token (obtained after [enabling MCP](/verify/mcp/cloud/platform/){target=\_blank}) on the kluster.ai platform.

    4. Save the file and restart Claude desktop to load the kluster Verify tools.

        ![](/images/verify/mcp/get-started/get-started-1.webp){ style="width:80%;" }

=== "VS Code"

    1. Install [GitHub Copilot](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot){target=\_blank} extension.
    2. Open the Chat view and click on the tools icon.

        ![](/images/verify/mcp/integrations/integrations-1.webp){ style="width:50%;" }

    3. Choose **Add More Tools...** and click on **Add MCP Server...**.
    4. Select **Command (stdio)** and enter the following command, replacing `YOUR_MCP_TOKEN` with your actual MCP token:

        ```bash
        npx mcp-remote https://api.kluster.ai/v1/mcp \
        --header "Authorization: Bearer YOUR_MCP_TOKEN"
        ```

    5. Restart VS Code.

=== "Cursor"

    Open Cursor settings and:
    
    1. Select **Tools & Integrations**.

    2. To add your first MCP, click **Add Custom MCP**. To add additional MCPs later, use **New MCP Server**. Then enter the following configuration:
            
        ```json
        {
            "mcpServers": {
                "kluster-verify-mcp": {
                    "url": "https://api.kluster.ai/v1/mcp",
                    "headers": {
                        "Authorization": "Bearer YOUR_MCP_TOKEN"
                    }
                }
            }
        }
        ```

    3. Restart Cursor.

    ![](/images/verify/mcp/integrations/integrations-2.webp){ style="width:80%;" }

=== "Claude code"

    Run this command in your terminal:

    ```bash
    claude mcp add kluster-verify-mcp \
      npx mcp-remote https://api.kluster.ai/v1/mcp \
      --header "Authorization: Bearer YOUR_MCP_TOKEN"
    ```

## Available tools

- **`verify`**: Validates prompt and response pairs against reliable sources.
- **`verify_document`**: Verifies prompt and response pairs in relation to uploaded documents.
<!-- Commenting this for safekeeping -->
<!--See [Tools reference](/verify/mcp/tools/){target=\_blank} for parameters and examples.-->

## SDK integrations

Looking to integrate MCP tools into your own applications? Check out the SDK integration guides:

- **[OpenAI Agents SDK](/verify/mcp/integrations/openai-agents/)**: Build Python agents with built-in verification capabilities using OpenAI's Agents framework.

## Next steps

- [Complete setup guide](/verify/mcp/get-started/) with usage examples.
- [Self-hosted deployment](/verify/mcp/self-hosted/) for local development.
--- END CONTENT ---

Doc-Content: https://docs.kluster.ai/verify/mcp/cloud/api/
--- BEGIN CONTENT ---
---
title: Cloud MCP API usage
description: Complete guide to using kluster.ai's Cloud MCP API with JSON-RPC requests. How to check it's status, enable, disable and test it. 
---

# API usage

Manage your Cloud MCP endpoint using API calls. This guide covers checking status, enabling and disabling your endpoint, obtaining MCP tokens, and testing verification tools. Use this as an alternative to the [platform UI](/verify/mcp/cloud/platform/){target=\_blank}.

## Prerequisites

Before getting started with MCP via API, ensure you have:

- **A kluster.ai account**: Sign up on the [kluster.ai platform](https://platform.kluster.ai/signup){target=\_blank} if you don't have one.
- **A kluster.ai API key**: After signing in, go to the [**API Keys**](https://platform.kluster.ai/apikeys){target=\_blank} section and create a new key. For detailed instructions, check out the [Get an API key](/verify/get-api-key/){target=\_blank} guide.

## Manage your MCP endpoint

### Check status

First, check if your MCP endpoint is already enabled:

```bash
curl -X GET https://api.kluster.ai/v1/mcp/status \
  -H "Authorization: Bearer YOUR_API_KEY"
```

If disabled, the response shows:

```json
{
    "enabled": false,
    "url": "",
    "apiKey": ""
}
```

### Enable endpoint

If not enabled, activate your MCP endpoint:

```bash
curl -X POST https://api.kluster.ai/v1/mcp/enable \
  -H "Authorization: Bearer YOUR_API_KEY"
```

The response includes your MCP token:

```json
{
    "enabled": true,
    "url": "https://api.kluster.ai/v1/mcp",
    "token": "MCP_TOKENxxxxxxxxxxxx"
}
```

Your MCP token is a specialized authentication token used specifically for MCP verification calls, separate from your main API key. Use this token when using all MCP verification tools.

!!! warning "Store your token securely"
    Store the token securely, as it provides access to your MCP verification services.
        
### Disable endpoint (optional)

You may want to disable your MCP endpoint. This option prevents any further MCP calls using that token until you enable the endpoint again.

To revoke access:

```bash
curl -X POST https://api.kluster.ai/v1/mcp/disable \
  -H "Authorization: Bearer YOUR_API_KEY"
```

## API overview

Cloud MCP uses JSON-RPC 2.0 with streaming support:

- **Management endpoints**: Use your main API key with `Authorization: Bearer YOUR_API_KEY`.
- **MCP endpoint**: `https://api.kluster.ai/v1/mcp`.
- **Method**: `POST`.
- **Authentication**: `Authorization: Bearer YOUR_MCP_TOKEN` (uses the MCP token from enable response).
- **Content-Type**: `application/json`.
- **Accept**: `application/json, text/event-stream` (required for streaming support).

## Request structure

All requests use the MCP tools/call format:

```json
{
    "jsonrpc": "2.0",
    "method": "tools/call",
    "params": {
        "name": "tool_name",
        "arguments": {
            // Tool-specific parameters
        }
    },
    "id": 1
}
```

## Test MCP tools

The following request is an example using the `verify` tool:

```bash
curl -X POST https://api.kluster.ai/v1/mcp \
  -H "Authorization: Bearer YOUR_MCP_TOKEN" \
  -H "Content-Type: application/json" \
  -H "Accept: application/json, text/event-stream" \
  -d '{
      "jsonrpc": "2.0",
      "method": "tools/call",
      "params": {
          "name": "verify",
          "arguments": {
              "prompt": "Is the Great Wall of China visible from space?",
              "response": "Yes, the Great Wall of China is visible from space with the naked eye."
          }
      },
      "id": 1
  }'
```
<!-- Commenting this for safekeeping -->
The response includes verification results nested in JSON-RPC format. <!--See [Tools reference](/verify/mcp/tools/) for complete tool parameters and response details.-->

## Next steps

- [Client integrations](/verify/mcp/integrations/) to configure your AI clients.
<!-- Commenting this for safekeeping -->
<!-- - [Tools reference](/verify/mcp/tools/) for complete tool documentation.-->
--- END CONTENT ---

Doc-Content: https://docs.kluster.ai/verify/mcp/cloud/platform/
--- BEGIN CONTENT ---
---
title: Cloud MCP platform management
description: Enable and manage kluster.ai's Cloud MCP endpoints through the platform UI with one-click setup and visual client examples.
---

# Platform management

Manage your Cloud MCP endpoint directly through the [kluster.ai platform](https://platform.kluster.ai){target=\_blank} interface. Enable your MCP, view your credentials, and access ready-to-use client examples.

This guide shows how to enable MCP through the platform UI and quickly integrate verification tools into your applications.

## Prerequisites

- **A kluster.ai account**: Sign up on the [kluster.ai platform](https://platform.kluster.ai/signup){target=\_blank} if you don't have one.
- **A kluster.ai API key**: After signing in, go to the [**API Keys**](https://platform.kluster.ai/apikeys){target=\_blank} section and create a new key. For detailed instructions, check out the [Get an API key](/verify/get-api-key/){target=\_blank} guide.

- **A kluster.ai account**: Sign up on the [kluster.ai platform](https://platform.kluster.ai/signup){target=\_blank} if you don't have one.

## Enable and use the MCP endpoint

To enable the MCP endpoint, go to the [kluster.ai platform](https://platform.kluster.ai){target=\_blank}

1. Navigate to **MCP** and view your current MCP status.
2. Click the **Enable Verify MCP** button to activate your endpoint.
3. Copy your client configuration.

Your MCP endpoint is now active. Copy your API key and save it securely. The platform provides ready-to-use integration examples for VSCode, Cursor, Claude code, and Claude desktop.

![MCP kluster.ai platform](/images/verify/mcp/cloud/platform/platform-1.webp)

## Next steps

- **Explore the API**: Learn about [API usage and integration patterns](/verify/mcp/cloud/api/).
- **View tutorials**: Follow the [reliability check tutorial](/tutorials/klusterai-api/reliability-check/).
- **Check pricing**: Review [MCP usage pricing](https://kluster.ai/pricing){target=\_blank}.
--- END CONTENT ---

Doc-Content: https://docs.kluster.ai/verify/mcp/get-started/
--- BEGIN CONTENT ---
---
title: Get started with MCP
description: Get kluster.ai verification tools integrated into Claude desktop in five minutes using Cloud MCP. No setup required, just enable and connect.
---

# Get started with MCP

Connect [kluster.ai's](https://www.kluster.ai/){target=\_blank} verification tools to your AI assistant through Model Context Protocol (MCP). This guide shows you how to enable [Cloud MCP](/verify/mcp/cloud/platform/) and integrate it with Claude desktop for real-time claim validation directly within your conversations.

Cloud MCP provides managed verification endpoints with no infrastructure to maintain - just enable your MCP endpoint and start verifying.

## Prerequisites

Before getting started, ensure you have:

- **A kluster.ai account**: Sign up on the [kluster.ai platform](https://platform.kluster.ai/signup){target=\_blank} if you don't have one.
- **A kluster.ai API key**: After signing in, go to the [**API Keys**](https://platform.kluster.ai/apikeys){target=\_blank} section and create a new key. For detailed instructions, check out the [Get an API key](/verify/get-api-key/){target=\_blank} guide.
- **[Claude desktop](https://claude.ai/download){target=\_blank}** for testing the integration.

## Enable MCP 

To enable the MCP endpoint, go to the [kluster.ai platform](https://platform.kluster.ai){target=\_blank} and take the following steps:

1. Navigate to **MCP** and view your current MCP status.
2. Click the **Enable Verify MCP** button to activate your endpoint.
3. Copy your client configuration.

!!! success "Endpoint enabled"
    Your MCP endpoint is now active. Copy your API key and save it securely.
    
The platform provides ready-to-use integration examples for VSCode, Cursor, Claude code, and Claude desktop.

![MCP kluster.ai platform](/images/verify/mcp/cloud/platform/platform-1.webp)

## Configure Claude desktop

Edit your Claude desktop configuration file:

=== "macOS"

    ```text
    ~/Library/Application Support/Claude/claude_desktop_config.json
    ```

=== "Windows"

    ```text
    %APPDATA%/Claude/claude_desktop_config.json
    ```

Add the MCP server configuration:

```json
{
    "mcpServers": {
        "kluster-verify-mcp": {
            "command": "npx",
            "args": [
                "mcp-remote",
                "https://api.kluster.ai/v1/mcp",
                "--header",
                "Authorization: Bearer YOUR_MCP_TOKEN"
            ]
        }
    }
}
```

Replace `YOUR_MCP_TOKEN` with your actual token or copy the snippet from the platform.

Restart Claude desktop. Once Claude desktop restarts, you'll see the verification tools available under `kluster-verify-mcp`.

![List tools on Claude desktop](/images/verify/mcp/get-started/get-started-1.webp)

## Available tools

Your MCP integration provides two verification tools:

- **`verify`**: Validates prompt and response pairs against reliable sources.
- **`verify_document`**: Verifies prompt and response pairs in relation to uploaded documents.


### Verify

Ask Claude to verify something obviously wrong:

> "The Eiffel Tower is located in Rome. Use the verify tool to check this."

Claude will automatically use the `verify` tool with:

- **`prompt`**: "Is the Eiffel Tower located in Rome?"
- **`response`**: "The Eiffel Tower is located in Rome."

And provides the following:

- **Verification result**: Whether the response contains hallucinations.
- **Detailed explanation**: Why it's wrong with supporting reasoning.
- **Source citations**: Search results used for verification.

![Verify MCP tool demo](/images/verify/mcp/get-started/get-started-2.webp)

### Verify documents

Perfect for detecting hallucinations or false claims about documents. Upload any document to Claude, then ask:

> "Does this document say that employees can work remotely full-time? The document says employees can work remotely without restrictions. Use the verify_document tool to check."

Claude will use the `verify_document` tool with:

- **`prompt`**: "Does this document say that employees can work remotely full-time?"
- **`response`**: "The document says employees can work remotely without restrictions."
- **`documentContent`**:  The content of the document as provided by the MCP client for verification.

This verifies the response against the actual document content.

## Alternative setup options

- **Other clients**: Want to use VS Code, Cursor, or Claude Code? Check the [Client integrations](/verify/mcp/integrations/){target=\_blank} guide for configuration examples.

- **Self-hosted**: Prefer to run MCP locally? Set up the [self-hosted MCP server](/verify/mcp/self-hosted/){target=\_blank} for local development with full control.

- **API activation**: Enable MCP using API calls with the [MCP API usage guide](/verify/mcp/cloud/api/){target=\_blank}.

## Next steps

- **Explore integrations**: Check [Client integrations](/verify/mcp/integrations/) for other platforms.

- **Try the tutorial**: Follow the [Reliability check notebook](/tutorials/klusterai-api/reliability-check/) with code examples.
--- END CONTENT ---

Doc-Content: https://docs.kluster.ai/verify/mcp/overview/
--- BEGIN CONTENT ---
---
title: MCP integration overview
description: Connect AI apps to kluster.ai services using MCP for seamless development workflow integration with verification tools and automated reliability checking.
---

# MCP integration

[Model Context Protocol](https://modelcontextprotocol.io/introduction){target=\_blank} (MCP) is an open standard for connecting AI assistants to specialized tools. Think of it as "USB-C for AI" - one protocol that works everywhere, enabling seamless integration between AI applications and external capabilities.

[kluster.ai](https://www.kluster.ai/){target=\_blank} provides MCP servers that bring AI services directly into your development workflow. Choose between a managed cloud endpoint or self-hosted deployment for seamless integration across platforms.

## What is MCP?

MCP lets AI applications access external capabilities:

- **Local tools**: Files, databases, custom functions.
- **Remote services**: APIs, web services, cloud resources.
- **Specialized features**: Like kluster.ai's verification technology.

## MCP through kluster.ai services

Instead of managing API calls and integrations, access kluster.ai's AI capabilities as native tools in Claude desktop, VS Code, and other MCP-compatible platforms.

The kluster.ai MCP offers the [Verify service](/verify/reliability/overview){target=\_blank} through two deployment options designed for different use cases and platforms.

### Cloud MCP

Managed cloud implementation - no infrastructure to maintain:

- **`verify`**: Validates prompt and response pairs against reliable sources.
- **`verify_document`**: Verifies prompt and response pairs in relation to uploaded documents.

Enable your endpoint through the kluster.ai platform, get your MCP token, and start verifying. Works with any MCP client using standard connection patterns.

### Self-hosted MCP

Same verification tools running on your infrastructure with full control. Deploy locally with Docker or Node.js.

## Integrate MCP

<div class="grid cards" markdown>

-   <span class="badge guide">Guide</span> __Get started with MCP__

    ---

    Quick start guide using Cloud MCP as the default path. Enable your endpoint and connect Claude Desktop in five minutes.

    [:octicons-arrow-right-24: Five-minute setup](/verify/mcp/get-started/){target=_self}

-   <span class="badge guide">Guide</span> __Cloud MCP__

    ---

    Enable managed MCP endpoints with MCP token authentication. There is no infrastructure to maintain, just enable and integrate.

    [:octicons-arrow-right-24: Platform setup](/verify/mcp/cloud/platform/){target=_self}

-   <span class="badge guide">Guide</span> __Self-hosted MCP__

    ---

    Deploy the MCP server locally with Docker or Node.js. Perfect for development and testing with full control.

    [:octicons-arrow-right-24: Local deployment](/verify/mcp/self-hosted/){target=_self}

</div>

## Additional resources

- **MCP protocol**: [Official MCP documentation](https://modelcontextprotocol.io/docs){target=\_blank}.
- **Verify service**: [Complete reliability verification guide](/verify/reliability/overview).
- **API reference**: [kluster.ai API documentation](/api-reference/reference/).
--- END CONTENT ---

Doc-Content: https://docs.kluster.ai/verify/mcp/sdk-integrations/openai-agents/
--- BEGIN CONTENT ---
---
title: Integrate OpenAI Agents SDK with kluster Verify
description: Integrate OpenAI Agents SDK with kluster Verify to create AI agents that detect hallucinations and validate facts with real-time verification.
---

# Integrate OpenAI Agents SDK with kluster Verify

[OpenAI Agents SDK](https://openai.github.io/openai-agents-python/){target=_blank} provides a powerful framework for building AI agents that can use tools, maintain context, and interact with external services. By integrating with [kluster Verify](/verify/overview/){target=_blank}, you can create agents that not only generate responses using [kluster.ai's](https://www.kluster.ai/){target=_blank} language models but also perform real-time reliability verification to detect hallucinations and validate factual claims with internet-sourced verification.

This guide demonstrates how to integrate the¬†`Agent`¬†and¬†`Runner`¬†classes from the OpenAI Agents SDK with kluster.ai's API and MCP server, and then walks through building an interactive chatbot that utilizes kluster Verify's hallucination detection capabilities.

## Prerequisites

- **A kluster.ai account**: Sign up on the [kluster.ai platform](https://platform.kluster.ai/signup){target=\_blank} if you don't have one.
- **A kluster.ai API key**: After signing in, go to the [**API Keys**](https://platform.kluster.ai/apikeys){target=\_blank} section and create a new key. For detailed instructions, check out the [Get an API key](/verify/get-api-key/){target=\_blank} guide.
- **Python 3.9+**: Make sure pip is also installed.
- **[A Python virtual environment](https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/){target=_blank}**: This is optional but recommended. Ensure that you enter the Python virtual environment before following along with this tutorial.
- **OpenAI Agents SDK packages installed**: Use the following command to install the [`openai-agents` packages](https://github.com/openai/openai-agents-python){target=_blank}.

    ```bash
    pip install "openai>=1.93.0" "openai-agents>=0.1.0" "mcp[cli]>=1.10.1"
    ```

- **MCP enabled**: This can be done via the [platform](https://platform.kluster.ai){target=_blank} or the [API](/verify/mcp/cloud/api/){target=\_blank}.

## Quick start

It's easy to integrate kluster Verify with OpenAI Agents SDK‚Äîwhen configuring the agent, point your `AsyncOpenAI` instance to the correct base URL and configure the following settings:

  - **Base URL**: Use `https://api.kluster.ai/v1` to send requests to the kluster.ai endpoint.
  - **API key**: Replace with your kluster.ai API key. If you don't have one yet, refer to the [Get an API key guide](/verify/get-api-key/).
  - **Select your model**: Choose a model with tool support from [kluster.ai's models](https://platform.kluster.ai/models){target=_blank} (filter by **Tool Support**).
  - **MCP server**: Configure the MCP server URL and token for kluster Verify's Reliability service.

```python
from agents import (
    Agent, 
    Runner, 
    set_tracing_disabled, 
    set_default_openai_api, 
    OpenAIChatCompletionsModel
)
from agents.mcp.server import MCPServerStreamableHttp
from openai import AsyncOpenAI
import asyncio
import getpass

# Configure SDK for production use
set_tracing_disabled(True)  # Disable OpenAI telemetry
set_default_openai_api("chat_completions")  # Use stable Chat API

# Get credentials securely
api_key = getpass.getpass("Enter your kluster.ai API key: ")
mcp_token = getpass.getpass("Enter your MCP token: ")

# Create kluster.ai client
kluster_client = AsyncOpenAI(
    base_url="https://api.kluster.ai/v1",
    api_key=api_key
)

# Configure MCP server for verification
mcp_server = MCPServerStreamableHttp(
    params={
        "url": "https://api.kluster.ai/v1/mcp",
        "headers": {"Authorization": f"Bearer {mcp_token}"},
        "timeout": 15,
        "sse_read_timeout": 15
    },
    client_session_timeout_seconds=30  # Increase from default 5 seconds to 30 seconds
)

# Create agent with kluster Verify capabilities
agent = Agent(
    name="ReliableAgent",
    instructions="Use kluster Verify for factual claims. Verify can detect hallucinations and validate information against real-time sources.",
    model=OpenAIChatCompletionsModel(
        model="deepseek-ai/DeepSeek-V3-0324",
        openai_client=kluster_client
    ),
    mcp_servers=[mcp_server]
)

# Run the agent
async def main():
    await mcp_server.connect()
    result = await Runner.run(agent, "Is the Earth flat?")
    print(result.final_output)

asyncio.run(main())
```

That's all you need to start with OpenAI Agents SDK and kluster Verify! Next, this guide will explore building an interactive chatbot that showcases kluster Verify's hallucination detection and real-time verification capabilities.

Only models with tool support can use MCP verification. To find compatible options, filter by **Tool Support** on the [platform models page](https://platform.kluster.ai/models){target=_blank}.

For self-hosted MCP, use `http://localhost:3001/stream` along with the kluster.ai API key.

!!! warning "Known async cleanup issue"
    Error messages about "Exception ignored in atexit callback" may appear when the script exits. This is a [known issue](https://github.com/modelcontextprotocol/python-sdk/issues/521){target=_blank} with MCP's asyncio cleanup that **does not affect functionality**. The script will work correctly despite these messages.

## Enable MCP

If you prefer, you can enable MCP and obtain your token via API calls instead of using the platform interface. This approach allows you to automate the token retrieval process and integrate it directly into your application setup workflow.

```python
import requests

# Enable MCP
response = requests.post(
    "https://api.kluster.ai/v1/mcp/enable",
    headers={"Authorization": f"Bearer {api_key}"}
)

# Get status with token
status = requests.get(
    "https://api.kluster.ai/v1/mcp/status", 
    headers={"Authorization": f"Bearer {api_key}"}
)
mcp_token = status.json()["apiKey"]
```

## Build an interactive chatbot

This example creates an interactive chatbot where you can ask questions and see kluster Verify validate the responses in real-time, demonstrating how verification enhances conversational AI.

Unlike the previous single-query example, this implementation creates a persistent conversational experience that continues until the user chooses to exit. Each interaction goes through the full verification pipeline, meaning every response is automatically checked for accuracy and potential hallucinations before being presented to the user.

```python
from agents import (
    Agent, 
    Runner, 
    set_tracing_disabled, 
    set_default_openai_api, 
    OpenAIChatCompletionsModel
)
from agents.mcp.server import MCPServerStreamableHttp
from openai import AsyncOpenAI
import asyncio
import getpass

# Configure SDK
set_tracing_disabled(True)
set_default_openai_api("chat_completions")

# Get credentials
api_key = getpass.getpass("Enter your kluster.ai API key: ")
mcp_token = getpass.getpass("Enter your MCP token: ")

# Create kluster.ai client
kluster_client = AsyncOpenAI(
    base_url="https://api.kluster.ai/v1",
    api_key=api_key
)
# Create MCP server
mcp_server = MCPServerStreamableHttp(
    params={
        "url": "https://api.kluster.ai/v1/mcp",
        "headers": {"Authorization": f"Bearer {mcp_token}"},
        "timeout": 15,
        "sse_read_timeout": 15
    },
    client_session_timeout_seconds=30  # Increase from default 5 seconds to 30 seconds
)

# Create chatbot agent
agent = Agent(
    name="VerifyChatbot",
    instructions="Use kluster Verify to validate factual claims and provide reliable responses.",
    model=OpenAIChatCompletionsModel(
        model="deepseek-ai/DeepSeek-V3-0324",
        openai_client=kluster_client
    ),
    mcp_servers=[mcp_server]
)

# Interactive chat loop
async def main():
    await mcp_server.connect()
    
    print("ü§ñ Chatbot ready! Type 'quit' to exit.")
    
    while True:
        user_input = input("\nüë§ You: ").strip()
        
        if user_input.lower() in ['quit', 'exit', 'q']:
            print("üëã Goodbye!")
            break
            
        if user_input:
            result = await Runner.run(agent, user_input)
            print(f"ü§ñ Bot: {result.final_output}")

asyncio.run(main())
```

??? code "Complete example"

    This complete example demonstrates how OpenAI Agents can leverage kluster Verify's hallucination detection through the MCP protocol.

    ```python
    import asyncio
    import requests
    import getpass
    from agents import (
        Agent, 
        Runner, 
        set_tracing_disabled, 
        set_default_openai_api, 
        OpenAIChatCompletionsModel
    )
    from agents.mcp.server import MCPServerStreamableHttp
    from openai import AsyncOpenAI

    def setup_mcp_token():
        """Enable MCP and get token"""
        api_key = getpass.getpass("Enter your kluster.ai API key: ")
        headers = {"Authorization": f"Bearer {api_key}"}
        
        # Enable MCP
        requests.post("https://api.kluster.ai/v1/mcp/enable", headers=headers)
        
        # Get token
        response = requests.get("https://api.kluster.ai/v1/mcp/status", headers=headers)
        return api_key, response.json()["apiKey"]

    async def main():
        set_tracing_disabled(True)
        set_default_openai_api("chat_completions")
        
        api_key, mcp_token = setup_mcp_token()
        
        # Create kluster.ai client
        kluster_client = AsyncOpenAI(
            base_url="https://api.kluster.ai/v1",
            api_key=api_key
        )
        

        # Create MCP server
        mcp_server = MCPServerStreamableHttp(
            params={
                "url": "https://api.kluster.ai/v1/mcp",
                "headers": {"Authorization": f"Bearer {mcp_token}"},
                "timeout": 15,
                "sse_read_timeout": 15
            },
            client_session_timeout_seconds=30  # Increase from default 5 seconds to 30 seconds
        )
        
        # Create agent
        agent = Agent(
            name="KlusterVerifyAgent",
            instructions="""You are a helpful assistant. Answer questions directly and accurately. 

    IMPORTANT: Always use kluster Verify's Reliability for factual claims.
    When verification shows is_hallucination=true, acknowledge the correction.

    Include Verify's explanations and search results when provided.""",
            model=OpenAIChatCompletionsModel(
                model="deepseek-ai/DeepSeek-V3-0324",
                openai_client=kluster_client
            ),
            mcp_servers=[mcp_server]
        )
        
        await mcp_server.connect()
        
        print("\n‚úÖ Chatbot ready! Type 'quit' to exit.")
        print("üí¨ Ask me anything and I'll verify my responses:\n")
        
        while True:
            try:
                # Get user input
                user_input = input("üë§ You: ").strip()
                
                if user_input.lower() in ['quit', 'exit', 'q']:
                    print("\nüëã Goodbye!")
                    break
                    
                if not user_input:
                    continue
                
                # Get agent response with verification
                print("ü§ñ Bot: Thinking and verifying...")
                result = await Runner.run(agent, user_input)
                print(f"ü§ñ Bot: {result.final_output}\n")
                
            except KeyboardInterrupt:
                print("\n\nüëã Goodbye!")
                break
            except Exception as e:
                print(f"‚ùå Error: {e}\n")

    if __name__ == "__main__":
        asyncio.run(main())
    ```

## Run the script


1. Use the following command to run the script:

    ```bash
    python reliable_agent.py
    ```

2. Enter your kluster.ai API key when prompted. If you don't have one yet, refer to the [Get an API key guide](/verify/get-api-key/){target=\_blank}.

Expected output:

<div class="termynal" data-termynal>
    <span data-ty="input">python reliable_agent.py</span>
    <span data-ty="input">üîë Enter your kluster.ai API Key: ‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢</span>
    <span data-ty>‚úÖ Chatbot ready! Type 'quit' to exit.</span>
    <span data-ty>üí¨ Ask me anything and I'll verify my responses:</span>
    <span data-ty></span>
    <span data-ty="input">üë§ You: Is it true that the Eiffel Tower was moved to London in May 2025?</span>
    <span data-ty>ü§ñ Bot: Thinking and verifying...</span>
    <span data-ty>ü§ñ Bot: No, the Eiffel Tower was not moved to London in May 2025 or at any other time. It remains in its original location in Paris, France.</span>
    <span data-ty></span>
    <span data-ty>### Verification Details:</span>
    <span data-ty>- **Explanation**: The search results confirm that the Eiffel Tower is located in Paris, and there is no credible information suggesting it was relocated to London.</span>
    <span data-ty>- **Supporting Sources**:</span>
    <span data-ty>  - [Eiffel Tower - Wikipedia](https://en.wikipedia.org/wiki/Eiffel_Tower) describes its location as Paris, France.</span>
    <span data-ty>  - Other sources mention proposals or ideas for towers in London but confirm these are unrelated to the Eiffel Tower.</span>
    <span data-ty></span>
    <span data-ty>The claim about the Eiffel Tower being moved to London is false.</span>
    <span data-ty></span>
    <span data-ty></span>
    <span data-ty="input">üë§ You: quit</span>
    <span data-ty></span>
    <span data-ty>üëã Goodbye!</span>
</div>

That's it! You've successfully integrated OpenAI Agents SDK with kluster Verify, and your configured agent is ready to leverage real-time hallucination detection and Reliability. For more information about the capabilities of OpenAI Agents SDK, be sure to check out the [OpenAI Agents docs](https://openai.github.io/openai-agents-python/){target=_blank}.

## Next steps

- Explore [kluster Verify's Reliability](/verify/reliability/overview/) for all verification capabilities.
- Try the [Verify API tutorial](/tutorials/klusterai-api/reliability) with detailed code examples.
- Learn about [tool filtering](https://openai.github.io/openai-agents-python/mcp/#tool-filtering){target=_blank} to control tool access.
- Check the [OpenAI Agents docs](https://openai.github.io/openai-agents-python/){target=_blank} for advanced features.
--- END CONTENT ---

Doc-Content: https://docs.kluster.ai/verify/mcp/self-hosted/
--- BEGIN CONTENT ---
---
title: Self-hosted MCP
description: Deploy kluster.ai's MCP server locally using Docker or Node.js for development and testing with full control over your infrastructure.
---

# Self-hosted MCP

Deploy [kluster.ai's](https://www.kluster.ai/){target=\_blank} MCP server locally for development and testing. This self-hosted implementation gives you full control over your infrastructure while providing the same verification tools as [Cloud MCP](/verify/mcp/cloud/platform/){target=\_blank}.

## Prerequisites

Before deploying the self-hosted MCP server, ensure you have:

- **A kluster.ai account**: Sign up on the [kluster.ai platform](https://platform.kluster.ai/signup){target=\_blank} if you don't have one.
- **A kluster.ai API key**: After signing in, go to the [**API Keys**](https://platform.kluster.ai/apikeys){target=\_blank} section and create a new key. For detailed instructions, check out the [Get an API key](/verify/get-api-key/){target=\_blank} guide.
- **A runtime environment**: You can use either [Docker Desktop](https://www.docker.com/products/docker-desktop/){target=\_blank} or [Node.js 18+](https://nodejs.org/){target=\_blank}.
- **[Git](https://git-scm.com/){target=\_blank}**: For cloning the repository.

## Clone repository

First, clone the MCP server repository:

```bash
git clone https://github.com/kluster-ai/verify-mcp
cd verify-mcp
```

## Deployment options

Run one of the following commands to either get started with Docker or Node.js:

=== "Docker"

    ```bash
    docker build -t kluster-verify-mcp .
    docker run --rm -p 3001:3001 kluster-verify-mcp --api-key YOUR_API_KEY
    ```

=== "Node.js"

    ```bash
    npm install
    npm run build
    npm start -- --api-key YOUR_API_KEY
    ```

The server will start on `http://localhost:3001` with the MCP endpoint at `/stream`.

## Client integration

Once your self-hosted server is running, configure your AI clients using the [Client integrations](/verify/mcp/integrations/){target=\_blank} guide.

Use these connection details:

- **MCP endpoint**: `http://localhost:3001/stream`.
- **Authentication**: Your kluster.ai API key.

## Available tools

Your self-hosted deployment provides the same verification tools as Cloud MCP:

- **`verify`**: Validates prompt and response pairs against reliable sources.
- **`verify_document`**: Verifies prompt and response pairs in relation to uploaded documents.
<!-- Commenting this for safekeeping -->
<!--For detailed parameters and response formats, see the [Tools reference](/verify/mcp/tools/){target=\_blank}.-->

## Next steps

- **Configure clients**: Follow the [Client integrations](/verify/mcp/integrations/) guide for VS Code, Claude Desktop, and other platforms.
<!-- Commenting this for safekeeping -->
<!--- **Learn the tools**: See [Tools reference](/verify/mcp/tools/) for detailed examples.-->
- **Try Cloud MCP**: Consider [Cloud MCP](/verify/mcp/cloud/platform/) for managed cloud deployment.
--- END CONTENT ---

Doc-Content: https://docs.kluster.ai/verify/mcp/tools/
--- BEGIN CONTENT ---
---
title: MCP tools reference
description: Reference guide for kluster.ai's MCP verification tools - verify claims and documents with detailed parameters and response formats.
search:
  exclude: true
---

# Tools reference

The [kluster.ai's](https://www.kluster.ai/){target=\_blank} MCP server provides two verification tools that work identically whether deployed [self-hosted](/verify/mcp/self-hosted/){target=\_blank} or via [Cloud MCP](/verify/mcp/cloud/platform/){target=\_blank}. These tools enable real-time reliability verification directly within your AI assistant conversations.

This page documents the tool parameters and response formats you'll see when using these tools in any MCP-compatible client.

## Tool overview


The following tools are available through the kluster.ai MCP server:

| Tool | Purpose | Best For |
|:---|:---|:---|
| `verify` | Verify prompt and response pairs | General statements, trivia, current events, news |
| `verify_document` | Verify prompt and response about documents | Quotes, data extraction, RAG hallucination checking |

### Verify

The verify tool allows you to check a prompt from a user and response from the agent against reliable online sources.

???+ interface "Parameters"

    `prompt` ++"string"++ <span class="required" markdown>++"required"++</span>

    The prompt the user made to the agent.

    ---

    `response` ++"string"++ <span class="required" markdown>++"required"++</span>

    The response from the agent that must be verified.

    ---

    `returnSearchResults` ++"boolean"++

    Include source citations. Defaults to `true`.

### Verify document

The verify document tool checks that a prompt from a user and a response from the agent accurately reflect the content of the uploaded document.

???+ interface "Parameters"


    `prompt` ++"string"++ <span class="required" markdown>++"required"++</span>

    The prompt the user made to the agent about the document.

    ---

    `response` ++"string"++ <span class="required" markdown>++"required"++</span>

    The response from the agent that must be verified against the document content.

    ---

    `documentContent` ++"string"++ <span class="required" markdown>++"required"++</span>

    Full document text (auto-provided by MCP client).

    ---

    `returnSearchResults` ++"boolean"++

    Include source citations. Defaults to `true`.

## Response fields

All verification tools return the same response structure:

- **`prompt`**: The user's prompt.
- **`response`**: The agent's response.
- **`is_hallucination`**: Boolean indicating if the response contains hallucinations.
- **`explanation`**: Detailed reasoning for the verdict.
- **`confidence`**: Token usage statistics `completion_tokens`, `prompt_tokens`, and `total_tokens`.
- **`search_results`**: Source citations (if requested).

An example can be seen below:

```json
{
    "prompt": "Does this employment contract allow unlimited remote work?",
    "response": "This employment contract allows unlimited remote work.",
    "is_hallucination": true,
    "explanation": "The response is incorrect. Section 4.2 explicitly requires on-site work minimum 3 days per week and residence within 50 miles of headquarters.",
    "confidence": {
        "completion_tokens": 156,
        "prompt_tokens": 890,
        "total_tokens": 1046
    },
    "search_results": []
}
```

## Next steps

- **Set up integrations**: Configure [client applications](/verify/mcp/integrations/) to use these tools.
- **Deploy locally**: Set up a [self-hosted MCP server](/verify/mcp/self-hosted/) for local development.
- **Use cloud version**: Enable [Cloud MCP](/verify/mcp/cloud/platform/) for managed deployment.
--- END CONTENT ---

Doc-Content: https://docs.kluster.ai/verify/openai-compatibility/
--- BEGIN CONTENT ---
---
title: Compatibility with OpenAI client libraries
description: Learn how kluster.ai is fully compatible with OpenAI client libraries, enabling seamless integration with your existing applications.
---

# OpenAI compatibility

The [kluster.ai](https://www.kluster.ai/){target=\_blank} API is compatible with [OpenAI](https://platform.openai.com/docs/api-reference/introduction){target=\_blank}'s API and SDKs, allowing seamless integration into your existing applications.

If you already have an application running with the OpenAI client library, you can easily switch to kluster.ai's API with minimal changes. This ensures a smooth transition without the need for significant refactoring or rework.

## Configuring OpenAI to use kluster.ai's API

Developers can use the OpenAI libraries with kluster.ai with no changes. To start, you need to install the library:

=== "Python"

    ```python
    pip install "openai>={{ libraries.openai_api.min_version }}"
    ```

To start using kluster.ai with OpenAI's client libraries, set your [API key](/get-started/get-api-key/){target=\_blank} and change the base URL to `https://api.kluster.ai/v1`:

=== "Python"

    ```python
    from openai import OpenAI
    
    client = OpenAI(
        base_url="https://api.kluster.ai/v1",
        api_key="INSERT_API_KEY",  # Replace with your actual API key
    )
    ```

## Unsupported OpenAI features

While kluster.ai's API is largely compatible with OpenAI's, the following sections outline the specific features and fields that are currently unsupported.

### Chat completions parameters

When creating a chat completion via the [`POST https://api.kluster.ai/v1/chat/completions` endpoint](/api-reference/reference/#/http/api-endpoints/realtime/v1-chat-completions-post){target=\_blank}, the following request parameters are not supported:

- `messages[].name`: Attribute in `system`, `user`, and `assistant` type message objects.
- `messages[].refusal`: Attribute in `assistant` type message objects.
- `messages[].audio`: Attribute in `assistant` type message objects.
- `messages[].tool_calls`: Attribute in `assistant` type message objects.
- `store`
- `n`
- `modalities`
- `response_format`
- `service_tier`
- `stream_options`

The following request parameters are supported only with Llama models:

- `tools`
- `tool_choice`
- `parallel_tool_calls`

The following request parameters are *deprecated*:

- `messages[].function_call`: Attribute in `assistant` type message objects. <!-- TODO: Once `messages[].tool_calls` is supported, this should be updated to use `messages[].tool_calls instead -->
- `max_tokens`: Use `max_completion_tokens` instead.
- `function_call` <!-- TODO: Once `tool_choice` is supported, this should be updated to use `tool_choice` instead -->
- `functions` <!-- TODO: Once `tools` is supported, this should be updated to use `tools` instead -->

For more information on these parameters, refer to [OpenAI's API documentation on creating chat completions](https://platform.openai.com/docs/api-reference/chat/create){target=_blank}.

### Chat completion object

The following fields of the [chat completion object](/api-reference/reference/#/http/models/structures/v1-chat-completions-request){target=\_blank} are not supported:

- `system_fingerprint`
- `usage.completion_tokens_details`
- `usage.prompt_tokens_details`

For more information on these parameters, refer to [OpenAI's API documentation on the chat completion object](https://platform.openai.com/docs/api-reference/chat/object){target=_blank}.
--- END CONTENT ---

Doc-Content: https://docs.kluster.ai/verify/overview/
--- BEGIN CONTENT ---
---
title: Overview of Verify
description: Learn more about the Verify service, a trust layer for AI stacks that provides a set of features to validate LLM outputs in real-time.
---

# Verify

LLMs can generate non-factual or irrelevant information (hallucinations). For developers, this presents significant challenges:

- Difficulty in programmatically trusting LLM outputs.
- Increased complexity in error handling and quality assurance.
- Potential for cascading failures in chained AI operations.
- Requirement for manual review cycles, slowing down development and deployment.

Traditional validation methods may involve complex rule sets, fine-tuning, or exhibit high false-positive rates, adding to the development burden.

Verify is an intelligent verification service that validates LLM outputs in real-time. It's designed to give you the trust needed to deploy AI at scale in production environments where accuracy matters most.

This page provides an overview of the Verify service.

## How Verify works

The Verify service functions as an intelligent agent. It assesses LLM output reliability based on three key inputs provided in the API call:

1.  **`prompt`**: The original input or question provided to the LLM. This gives context to the user's intent.
2.  **`output`**: The response generated by the LLM that requires validation.
3.  **`context` (Optional)**: Any source material or documents provided to the LLM (e.g., in RAG scenarios) against which the output's claims should be verified.

Verify analyzes these inputs and can leverage **real time internet access** to validating claims against up-to-date public information, extending its capabilities beyond static knowledge bases.

## Performance benchmarks

Verify has been benchmarked against other solutions on [HaluEval](https://github.com/RUCAIBox/HaluEval){target=\_blank} and [HaluBench](https://huggingface.co/datasets/PatronusAI/HaluBench){target=\_blank} datasets (over 25,000 samples).

- **Non-RAG Scenarios (Context-Free):**
    - Compared against CleanLab TLM (GPT 4o-mini, medium quality, optimized threshold).
    - Results: Verify showed 11% higher overall accuracy, a 2.8% higher median F1 score (72.3% vs. 69.5%), and higher precision (fewer false positives). Response times are comparable (sub-10 seconds).
- **RAG Validation (Context-Provided):**
    - Compared against Patronus AI's Lynx (70B) and CleanLab TLM.
    - Results: On RAGTruth (factual consistency), Verify significantly outperformed Lynx 70B and CleanLab TLM. On DROP (numerical/logical reasoning), Verify showed competitive performance against Lynx and outperformed CleanLab TLM.
    - Note: Lynx was trained on the training sets of DROP and RAGTruth, highlighting Verify's generalization capabilities to unseen data configurations.

These results indicate Verify's effectiveness in diverse scenarios relevant to production AI systems.

## Target applications & use cases

Developers can integrate Verify into applications where LLM output accuracy is paramount:

- Automated content generation pipelines.
- Customer-facing chatbots and virtual assistants.
- Question-answering systems over private or public data (RAG).
- AI-driven data extraction and summarization tools.
- Internal workflow automation involving LLM-generated text.
--- END CONTENT ---

Doc-Content: https://docs.kluster.ai/verify/quickstart/reliability/
--- BEGIN CONTENT ---
---
title: Reliability quick start
description: Get started with kluster.ai's reliability verification in under 5 minutes. Detect hallucinations and validate AI responses with a simple API call.
---

# Reliability quick start

AI models can generate convincing but factually incorrect responses, known as hallucinations. Traditional approaches to validation often require manual review or complex rule-based systems that are time-consuming and difficult to scale.

The [kluster.ai](https://www.kluster.ai/){target=\_blank} Reliability service addresses these challenges by providing real-time validation of AI-generated responses. It automatically detects hallucinations and ensures accuracy by analyzing the original prompt and the AI's response to determine if the output contains unreliable or fabricated information.

This guide will walk you through setting up the Reliability service, demonstrate a quick example, and show you the different integration options available.

## Prerequisites

Before getting started, ensure you have:

- **A kluster.ai account**: Sign up on the [kluster.ai platform](https://platform.kluster.ai/signup){target=\_blank} if you don't have one.
- **A kluster.ai API key**: After signing in, go to the [**API Keys**](https://platform.kluster.ai/apikeys){target=\_blank} section and create a new key. For detailed instructions, check out the [Get an API key](/verify/get-api-key/){target=\_blank} guide.

## Integration options

You can use the Reliability service through three methods:

- **[Verify API](/verify/reliability/verify-api/)** - direct REST API endpoint for maximum control.
- **[Chat completion](/verify/reliability/chat-completion/)** - OpenAI-compatible endpoint using the `klusterai/verify-reliability` model.
- **[MCP integration](/verify/mcp/get-started/)** - connect to Cursor or other AI assistants for interactive verification.

## Quick example

Here's the simplest way to check if an AI response contains hallucinations:

```python
from os import environ
import requests
from getpass import getpass

# Get API key securely
api_key = environ.get("INSERT_API_KEY") or getpass("Enter your kluster.ai API key: ")

# Check if a response is reliable
response = requests.post(
    "https://api.kluster.ai/v1/verify/reliability",
    headers={"Authorization": f"Bearer {api_key}"},
    json={
        "prompt": "What is the capital of France?",
        "output": "The capital of France is London."
    }
)

result = response.json()
print(f"Hallucination detected: {result['is_hallucination']}")
print(f"Explanation: {result['explanation']}")
```

## Response format

The API returns:

```json
{
    "is_hallucination": true,
    "explanation": "The response incorrectly states that London is the capital of France. The capital of France is Paris, not London.",
    "usage": {
        "completion_tokens": 42,
        "prompt_tokens": 28,
        "total_tokens": 70
    }
}
```

## Next steps

- Add [context validation](/verify/reliability/verify-api/#context-validation-mode) for RAG applications.
- Use [chat completion format](/verify/reliability/chat-completion/) for conversation history.
- Enable [MCP](/verify/mcp/get-started/) for Claude desktop integration.
- Explore [workflow integrations](/verify/reliability/workflow-integrations/) for Dify and n8n.
--- END CONTENT ---

Doc-Content: https://docs.kluster.ai/verify/reliability/chat-completion/
--- BEGIN CONTENT ---
---
title: Chat completion Verify API
description: Validate full chat conversations for reliability using the kluster.ai chat completion endpoint. Analyze context and detect misinformation.
---

# Reliability via chat completion

Developers can access Reliability via the regular chat completion endpoint. This allows you to validate responses in full conversation histories using the same format as the standard chat completions API. This approach enables verification of reliability within the complete context of a conversation.

This guide provides a quick example of how the chat completion endpoint can be used for reliability checks.

## Prerequisites

Before getting started with Reliability, ensure the following requirements are met:

- **A kluster.ai account**: Sign up on the [kluster.ai platform](https://platform.kluster.ai/signup){target=\_blank} if you don't have one.
- **A kluster.ai API key**: After signing in, go to the [**API Keys**](https://platform.kluster.ai/apikeys){target=\_blank} section and create a new key. For detailed instructions, check out the [Get an API key](/verify/get-api-key/){target=\_blank} guide.
- **A virtual Python environment**: (Optional) Recommended for developers using Python. It helps isolate Python installations in a [virtual environment](https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/){target=\_blank} to reduce the risk of environment or package conflicts between your projects
- **Required Python libraries**: Install the following Python libraries:
    - [**OpenAI Python API library**](https://pypi.org/project/openai/){target=\_blank}: to access the `openai` module
    - [**`getpass`**](https://pypi.org/project/getpass4/){target=\_blank}: To handle API keys safely


## Integration options

You can access the reliability verification service in two flexible OpenAI compatible ways, depending on your preferred development workflow. For both, you'll need to set the model to `klusterai/verify-reliability`:

- **OpenAI compatible endpoint**: Use the OpenAI API `/v1/chat/completions` pointing to kluster.ai.
- **OpenAI SDK**: Configure kluster.ai with [OpenAI libraries](/verify/openai-compatibility/#configuring-openai-to-use-klusterais-api){target=\_blank}. Next, the `chat.completions.create` endpoint.

## Reliability via chat completions

This example shows how to use the service with the chat completion endpoint via the OpenAI `/v1/chat/completions` endpoint and OpenAI libraries, using the specialized `klusterai/verify-reliability` model to enable Verify reliability check.

=== "Python"

    ```python
    from getpass import getpass
from os import environ

from openai import OpenAI

# Get API key from user input
api_key = environ.get("API_KEY") or getpass("Enter your kluster.ai API key: ")

print(f"üì§ Sending a Reliability request to kluster.ai...\n")

# Initialize OpenAI client pointing to kluster.ai API
client = OpenAI(
    api_key=api_key,
    base_url="https://api.kluster.ai/v1"
)

# Create chat completion request
completion = client.chat.completions.create(
    model="klusterai/verify-reliability", # Note special model
    messages = [
    {
        "role": "system",
        "content": "You are a knowledgeable assistant that provides accurate medical information."
    },
    {
        "role": "user",
        "content": "Does vitamin C cure the common cold?"
    },
    {
        "role": "assistant",
        "content": "Yes, taking large doses of vitamin C has been scientifically proven to cure the common cold within 24 hours."
    }
]
)

# Extract the reliability verification response
text_response = completion.choices[0].message.content  

# Print response to console
print(text_response)
    ```

=== "CLI"

    ```bash
    #!/bin/bash

    # Check if API_KEY is set and not empty
    if [[ -z "$API_KEY" ]]; then
        echo -e "\nError: API_KEY environment variable is not set.\n" >&2
    fi
    
    echo -e "üì§ Sending a Reliability chat completion request to kluster.ai...\n"
    
    # Submit real-time request
    curl https://api.kluster.ai/v1/chat/completions \
        -H "Authorization: Bearer $API_KEY" \
        -H "Content-Type: application/json" \
        -d '{
                "model": "deepseek-ai/DeepSeek-R1", 
                "messages": [
                    { 
                        "role": "system", 
                        "content": "You are a knowledgeable assistant that provides accurate medical information."
                    },
                    { 
                        "role": "user", 
                        "content": "Does vitamin C cure the common cold?"
                    },
                    { 
                        "role": "assistant", 
                        "content": "Yes, taking large doses of vitamin C has been scientifically proven to cure the common cold within 24 hours."
                    }
                ]
            }'
    ```

## Next steps

- Learn how to use the [Verify API](/verify/reliability/verify-api/){target=\_blank} for simpler verification scenarios
- Review the complete [API documentation](/api-reference/reference/#/http/api-endpoints/realtime/v1-verify-reliability-post){target=\_blank} for detailed endpoint specifications
--- END CONTENT ---

Doc-Content: https://docs.kluster.ai/verify/reliability/overview/
--- BEGIN CONTENT ---
---
title: Reliability by Verify
description: Learn how to use kluster.ai reliability verification and prevent unreliable content in your applications using kluster.ai's specialized Verify.
---

# Reliability by Verify

Reliability is one of the features offered by Verify, and it is able to identify when AI responses contain fabricated or inaccurate information.

With this specialized service, you can gauge the reliability of AI-generated content and build more trustworthy applications.

The service can evaluate the AI response based on a given context, which makes it great for RAG applications. Without providing a specific context, the service can also be used as a real-time Reliability service.

## How Reliability works

The service evaluates the truthfulness of an answer to a question by:

1. Analyzing the original question, prompt or entire conversation history.
2. Examining the provided answer (with context if provided).
3. Determining if the answer contains unreliable or unsupported information.
4. Providing a detailed explanation of the reasoning behind the determination as well as the search results used for verification.
    
The service evaluates AI outputs in order to identify reliability issues or incorrect information, with the following fields:

- **is_hallucination=true/false**: Indicates whether the response contains unreliable content.
- **explanation**: Provides detailed reasoning for the determination.
- **search_results**: Shows the reference data used for verification (when applicable).

For example, for the following prompt:

```
...
   {
        "role": "user",
        "content": "Where is the Eiffel Tower?"
    },
    {
        "role": "assistant",
        "content": "The Eiffel Tower is located in Rome."
    }
...
```

The Reliability response would return:

```json
{
  "is_hallucination": true,
  "usage": {
    "completion_tokens": 154,
    "prompt_tokens": 1100,
    "total_tokens": 1254
  },
  "explanation": "The response provides a wrong location for the Eiffel Tower.\n"
                 "The Eiffel Tower is actually located in Paris, France, not in Rome.\n"
                 "The response contains misinformation as it incorrectly states the tower's location.",
  "search_results": []
}
```

## When to use Reliability

The Reliability service is ideal for scenarios where you need:

- **Model evaluation**: Easily integrate the service to compare models output quality.
- **RAG applications**: Verify that generated responses accurately reflect the provided reference documents rather than introducing fabricated information.
- **Internet-sourced verification**: Validate claims against reliable online sources with transparent citation of evidence.
- **Content moderation**: Automatically flag potentially misleading information before it reaches end users.
- **Regulatory compliance**: Ensure AI-generated content meets accuracy requirements.

## How to integrate Reliability

Verify offers multiple ways to use Reliability, each designed for different use cases:

<div class="grid cards" markdown>

-   <span class="badge guide">Guide</span> __Verify API__

    ---

    Verify the reliability and accuracy of an answer to a specific question via a dedicated API endpoint.

    [:octicons-arrow-right-24: Visit the guide](/verify/reliability/verify-api/){target=\_blank}

-   <span class="badge guide">Guide</span> Chat completion endpoint

    ---

    Validate responses in full conversation via the chat completions API using OpenAI libraries.

    [:octicons-arrow-right-24: Visit the guide](/verify/reliability/chat-completion/){target=\_blank}

-   <span class="badge integration">Integration</span> __Workflow Integrations__

    ---

    Download ready-to-use workflows for Dify, n8n, and other platforms using direct API integration.

    [:octicons-arrow-right-24: Get workflows](/verify/reliability/workflow-integrations/){target=\_blank}

</div>

## Additional resources

- **Workflow Integrations**: Download [ready-to-use workflows for Dify, n8n](/verify/reliability/workflow-integrations/){target=\_blank}.
- **Tutorial**: Explore the [Verify tutorial](/tutorials/klusterai-api/reliability){target=\_blank} with code examples.
--- END CONTENT ---

Doc-Content: https://docs.kluster.ai/verify/reliability/verify-api/
--- BEGIN CONTENT ---
---
title: Verify API endpoint
description: Validate the reliability of question-answer pairs using kluster.ai API, with or without context, to detect hallucinations and ensure response accuracy.
---

#  Reliability via the Verify API

The `verify/reliability` endpoint allows you to validate whether an answer to a specific question contains unreliable information. This approach is ideal for verifying individual responses against the provided context (when the `context` parameter is included) or general knowledge (when no context is provided).

This guide provides a quick example of how use the `verify/reliability` endpoint for reliability verification.

## Prerequisites

Before getting started with Reliability, ensure the following requirements are met:

- **A kluster.ai account**: Sign up on the [kluster.ai platform](https://platform.kluster.ai/signup){target=\_blank} if you don't have one.
- **A kluster.ai API key**: After signing in, go to the [**API Keys**](https://platform.kluster.ai/apikeys){target=\_blank} section and create a new key. For detailed instructions, check out the [Get an API key](/verify/get-api-key/){target=\_blank} guide.

## Endpoint parameters

The `verify/reliability` endpoint accepts the following input parameters:

- **`prompt`** (`string`| required): The question asked or instruction given. 
- **`output`** (`string`|required):  The LLM answer to verify for reliability.
- **`context`** (`string`|optional): Reference material to validate against.
- **`return_search_results`** (`boolean`|optional): Whether to include search results (default: false).

The API returns a JSON object with the following structure:

```json
{
    "is_hallucination": boolean,
    "usage": {
        "completion_tokens": number,
        "prompt_tokens": number,
        "total_tokens": number
    },
    "explanation": "string",
    "search_results": []  // Only included if return_search_results is true
}
```

## How to use the Verify API

Reliability operates in two distinct modes depending on whether you provide context with your request:

- **General knowledge verification**: When no context is provided, the service verifies answers against general knowledge and external sources.
- **Context validation mode**: When context is provided, the service only validates answers against the specified context.

### General knowledge verification

This example checks whether an answer contains unreliable information. As no context is provided, the answer will be verified against general knowledge to identify reliability issues.

=== "Python"

    ```python
    from os import environ
    import requests
    from getpass import getpass

    # Get API key from user input
    api_key = environ.get("API_KEY") or getpass("Enter your kluster.ai API key: ")

    print(f"üì§ Sending a Reliability request to kluster.ai...\n")

    # Set up request data
    url = "https://api.kluster.ai/v1/verify/reliability"
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    payload = {
        "prompt": "Is earth flat?",
        "output": "Yes, my friend",
        "return_search_results": False #Optional
    }

    # Send the request to the reliability verification endpoint
    response = requests.post(url, headers=headers, json=payload)

    # Convert the response to JSON
    result = response.json()

    # Extract key information
    is_hallucination = result.get("is_hallucination")
    explanation = result.get("explanation")

    # Print whether reliability issue was detected
    print(f"{'üö®RELIABILITY ISSUE DETECTED' if is_hallucination else '‚úÖNO RELIABILITY ISSUE DETECTED'}")

    # Print the explanation 
    print(f"\nüß†Explanation: {explanation}")

    # Print full response
    print(f"\nüîóAPI Response: {result}")
    ```
=== "CLI"

    ```bash
    #!/bin/bash
    
    # Check if API_KEY is set and not empty
    if [[ -z "$API_KEY" ]]; then
        echo -e "\nError: API_KEY environment variable is not set.\n" >&2
    fi
    
    echo -e "üì§ Sending a Reliability request to kluster.ai...\n"
    
    # Submit reliability verification request
    response=$(curl --location 'https://api.kluster.ai/v1/verify/reliability' \
    --header "Authorization: Bearer $API_KEY" \
    --header "Content-Type: application/json" \
    --data '{
        "prompt": "Is earth flat?",
        "output": "Yes, 100%.",
        "return_search_results": false 
    }')
    
    # Extract key information
    is_hallucination=$(echo "$response" | jq -r '.is_hallucination')
    explanation=$(echo "$response" | jq -r '.explanation')
    
    # Print whether reliability issue was detected
    if [[ "$is_hallucination" == "true" ]]; then
        echo -e "\nüö® RELIABILITY ISSUE DETECTED"
    else
        echo -e "\n‚úÖ NO RELIABILITY ISSUE DETECTED"
    fi
    
    # Print the explanation
    echo -e "\nüß† Explanation: $explanation"
    
    # Print full response
    echo -e "\nüîó API Response: $response"
    ```

### Context validation mode

When providing the `context` parameter, the service will not perform external verification. Instead, it focuses on whether the answer complies with the provided context.

!!! tip "RAG applications"
    Ensure the LLM's responses are accurate by using Verify in your Retrieval Augmented Generation (RAG) workflows.

This example checks whether an answer is correct based on the provided context.

=== "Python"

    ```python
    from os import environ
    import requests
    from getpass import getpass

    # Get API key from user input
    api_key = environ.get("API_KEY") or getpass("Enter your kluster.ai API key: ")

    print(f"üì§ Sending a Reliability request with context to kluster.ai...\n")

    # Set up request data
    url = "https://api.kluster.ai/v1/verify/reliability"
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    payload = {
        "prompt": "What's the invoice date?",
        "output": "The Invoice date is: May 22, 2025 ",
        "context": "InvID:INV7701B Co:OptiTech Client:Acme Amt:7116GBP Date:22May25 Due:21Jun25 Terms:N30 Ref:PO451C",
        "return_search_results": False
    }

    # Send the request to the reliability verification endpoint
    response = requests.post(url, headers=headers, json=payload)

    # Convert the response to JSON
    result = response.json()

    # Extract key information
    is_hallucination = result.get("is_hallucination")
    explanation = result.get("explanation")

    # Print whether reliability issue was detected
    print(f"{'üö®RELIABILITY ISSUE DETECTED' if is_hallucination else '‚úÖNO RELIABILITY ISSUE DETECTED'}")

    # Print the explanation 
    print(f"\nüß†Explanation: {explanation}")

    # Print full response
    print(f"\nüîóAPI Response: {result}")
    ```

=== "CLI"

    ```bash
    #!/bin/bash

    # Check if API_KEY is set and not empty
    if [[ -z "$API_KEY" ]]; then
        echo -e "\nError: API_KEY environment variable is not set.\n" >&2
    fi

    echo -e "üì§ Sending a Reliability request with context to kluster.ai...\n"


    # Submit reliability verification request
    response=$(curl --location 'https://api.kluster.ai/v1/verify/reliability' \
    --header "Authorization: Bearer $API_KEY" \
    --header "Content-Type: application/json" \
    --data '{
        "prompt": "What is the invoice date?",
        "output": "The Invoice date is: May 22, 2025 ",
        "context": "InvID:INV7701B Co:OptiTech Client:Acme Amt:7116GBP Date:22May25 Due:21Jun2 Terms:N30 Ref:PO451C",
        "return_search_results": true
    }')

    # Extract key information
    is_hallucination=$(echo "$response" | jq -r '.is_hallucination')
    explanation=$(echo "$response" | jq -r '.explanation')
    
    # Print whether reliability issue was detected
    if [[ "$is_hallucination" == "true" ]]; then
        echo -e "\nüö® RELIABILITY ISSUE DETECTED"
    else
        echo -e "\n‚úÖ NO RELIABILITY ISSUE DETECTED"
    fi
    
    # Print the explanation
    echo -e "\nüß† Explanation: $explanation"
    
    # Print full response
    echo -e "\nüîó API Response: $response"
    ```

## Best practices

1. **Include relevant context**: When validating against specific information, provide comprehensive context.
2. **Use domain-specific context**: Include authoritative references for specialized knowledge domains.
3. **Consider general verification**: For widely known information, the service can verify against general knowledge sources.
4. **Review explanations**: The detailed explanations provide valuable insights into the reasoning process.

## Next steps

- Learn how to use [Chat completion reliability verification](/verify/reliability/chat-completion/){target=\_blank} for evaluating entire conversation histories.
- Review the complete [API documentation](/api-reference/reference/#/http/api-endpoints/realtime/v1-verify-reliability-post){target=\_blank} for detailed endpoint specifications.
--- END CONTENT ---

Doc-Content: https://docs.kluster.ai/verify/reliability/workflow-integrations/
--- BEGIN CONTENT ---
---
title: Workflow Integrations
description: Easily integrate Verify into Dify, n8n, and more with ready-made workflows to automate AI response validation via API in minutes.
---

# Workflow integrations

You can integrate Verify's Reliability feature into your favorite automation platforms with ready-to-use workflow templates. These pre-configured workflows connect directly to the kluster.ai API, allowing you to add AI verification capabilities to your existing processes in minutes.

## Prerequisites

Before getting started with the workflow integrations, ensure the following requirements are met:

- **A kluster.ai account**: Sign up on the [kluster.ai platform](https://platform.kluster.ai/signup){target=\_blank} if you don't have one.
- **A kluster.ai API key**: After signing in, go to the [**API Keys**](https://platform.kluster.ai/apikeys){target=\_blank} section and create a new key. For detailed instructions, check out the [Get an API key](/verify/get-api-key/){target=\_blank} guide.
- **Workflow platform**: Set up [Dify](https://dify.ai/){target=\_blank}, [n8n](https://n8n.io/){target=\_blank}, or your preferred automation tool.

## Available Workflows

### Dify

By using [Dify](https://dify.ai/){target=\_blank}, you can build AI applications with built-in reliability verification. 

This workflow seamlessly integrates Verify into your Dify chatbots and agents, ensuring every response is validated for accuracy and trustworthiness before reaching your users.

![Dify workflow for kluster verify](/images/verify/reliability/workflows/dify_workflow.webp)

**Configure kluster.ai as a Model Provider** 

1. Navigate to **Settings** and select **Model Provider**
2. Click on **Add Provider** and choose **OpenAI-API-compatible**

Enter these settings:

- **Base URL**: `https://api.kluster.ai/v1`
- **API Key**: Your kluster.ai API key
- **Model**: Select from [available models](https://platform.kluster.ai/models){target=\_blank}

Save and test the connection to ensure it works properly.

**Set up the kluster verify node:**

1. Select the HTTP Request node `kluster verify`
2. Add your API key to the Authorization header

**Import and Configure the Workflow** 

Download the workflow template below and import it into your Dify workspace. 

The workflow comes pre-configured to verify AI responses in real-time.

[Download Dify Workflow](workflows/dify_workflow.yml){target=\_blank .md-button}

### n8n

Add verification checkpoints to your [n8n](https://n8n.io/){target=\_blank} automation pipelines.

This workflow validates AI-generated content against your source documents, tools, or real-time data, perfect for ensuring accuracy in automated content generation and data processing workflows.

![n8n workflow for kluster verify](/images/verify/reliability/workflows/n8n_workflow.webp)

**Set Up API Credentials**

- Select the OpenAI and choose **Credentials**. Then click **Create New**

- **Base URL**: `https://api.kluster.ai/v1`
- **API Key**: Your kluster.ai API key
- **Model**: Select from [available models](https://platform.kluster.ai/models){target=\_blank}

**Set up the kluster verify node API key:**

Open the kluster verify node and modify the headers as follow:

- **Header Name**: `Authorization`
- **Header Value**: `Bearer YOUR_API_KEY`


**Import and Configure the Workflow** 

Download the workflow template below and import it via the n8n interface. 

The workflow includes pre-configured HTTP nodes that connect to the `/v1/verify/reliability` endpoint, handle request/response formatting, and parse verification results. Connect your data sources and configure output routing as needed.

[Download n8n Workflow](workflows/n8n_workflow.json){target=\_blank .md-button}

## Next Steps

Ready to build more reliable AI applications?

- **Explore the API**: Check the [complete API reference](/api-reference/reference/#/http/api-endpoints/realtime/v1-verify-reliability-post){target=\_blank} for advanced configuration options.
- **Learn verification methods**: Dive into the [Verify API endpoint](/verify/reliability/verify-api/){target=\_blank} for detailed implementation patterns.
- **Try the tutorial**: Follow the [hands-on Reliability tutorial](/tutorials/klusterai-api/reliability/){target=\_blank} with code examples.
--- END CONTENT ---

